(*
BankScreen
==========
This file stores all methods that are used in the bankscreen-iterface.
All methods here are called with the bankscreen ``BankScreen`` variable.

.. code-block:: pascal

    Writeln(BankScreen.IsOpen());
*)
type
  EBankButton = (bbSwap, bbInsert, bbItem, bbNote, bbSearch, bbDepositInv, bbDepositWorn, bbMenu, bbClose);
  EBankType = (btNPCBlue, btNPCGray, btNPCGrey);

  TRSBankScreen = record (TInterfaceBase)
    fSlots: TBoxArray;
    fButtons: array [0..High(EBankButton)] of TBox;
  end;

var
  BankScreen: TRSBankScreen;


const
   WITHDRAW_ALL = -1;
   WITHDRAW_ALL_BUT_ONE = -2;


{$IFNDEF CodeInsight}
procedure TRSBankScreen.__Setup();
begin
  with Self do
  begin
    SetBounds(Box(16, 6, 503, 336));
    SetName('Bankscreen');
    SetStatic(True);

    fSlots := Box(66, 82, 448, 296).PartitionEx(6,8,-7,-2);

    with Self.GetBounds() do
    begin
      fButtons[bbSwap] := Box(X1 + 6, Y2 - 25, X1 + 88, Y2 - 6);
      fButtons[bbInsert] := Box(X1 + 91, Y2 - 25, X1 + 173, Y2 - 6);
      fButtons[bbItem] := Box(X1 + 186, Y2 - 25, X1 + 268, Y2 - 6);
      fButtons[bbNote] := Box(X1 + 272, Y2 - 25, X1 + 353, Y2 - 6);

      fButtons[bbSearch] := Box(X2 - 122, Y2 - 40, X2 - 89, Y2 - 7);
      fButtons[bbDepositInv] := Box(X2 - 76, Y2 - 40, X2 - 43, Y2 - 7);
      fButtons[bbDepositWorn] := Box(X2 - 40, Y2 - 40, X2 - 7, Y2 - 7);

      fButtons[bbMenu] := Box(X2 - 36, Y1 + 42, X2 - 12, Y1 + 66);
      fButtons[bbClose] := Box(X2 - 27, Y1 + 7, X2 - 7, Y1 + 27);
    end;
  end;
end;
{$ENDIF}


function TRSBankScreen._ExpectText(txt:String; B:TBox; font:TFontSet; cfg:TCompareRules; maxWait:Int32=6000): Boolean;
var
  t:UInt64;
begin
  t := GetTickCount64() + maxWait;
  while GetTickCount64() < t do
    if Pos(txt, ocr.Recognize(B, cfg, font)) <> 0 then
      Exit(True)
    else
      Wait(20);
end;


procedure TRSBankScreen._Debug();
var
  BMP, i: Integer;
begin
  BMP := BitmapFromClient(GetClientBounds());

  for i := 0 to High(fButtons) do
    DrawTPABitmap(BMP, EdgeFromBox(fButtons[i]), 255);
  for i := 0 to High(fSlots) do
    DrawTPABitmap(BMP, EdgeFromBox(fSlots[i]), $00FF00);

  ShowBitmap(BMP);
  FreeBitmap(BMP);
end;

function TRSBankScreen._Find(): Boolean;
const
  TEXT_COL = 2070783;
var
  p: TPoint;
begin
  Result := srl.FindText(p, 'Rearrange mode', 'SmallChars', TEXT_COL, 0, Box(54,295,154,314));
end;

(*
BankScreen.IsOpen
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.IsOpen(): Boolean;

returns True if the bankscreen is open
*)
function TRSBankScreen.IsOpen(WaitTime: UInt32 = 0): Boolean;
var
  t: UInt64;
begin
  t := GetTickCount64() + WaitTime;

  repeat
    if (Self._Find()) then
      Exit(True)
    else if (WaitTime > 0) then
      Wait(Random(25, 50));
  until (GetTickCount64() >= t);
end;

function TRSBankScreen.FindNPCs(Color: TColorEx; var Points: T2DPointArray; MinWidth: Integer = 10; MinHeight: Integer = 10): Boolean;
const
  COLOR_SKIN: TColorEx = [5603764, 18, [2, [0.02, 0.70]]];
var
  TPASkin, TPA, temp: TPointArray;
  ATPASkin, ATPA: T2DPointArray;
  i, W, H: Integer;
  b: TBox;
begin
  SetLength(Points, 0);
  if (not FindColorsTolerance(TPASkin, COLOR_SKIN.Color, Mainscreen.getBounds(), COLOR_SKIN.Tolerance, COLOR_SKIN.Settings)) then
    Exit(False);

  ATPASkin := ClusterTPAEx(TPASkin, 5, 5);
  for i := 0 to High(ATPASkin) do
    if (Length(ATPASkin[i]) < 300) then
    begin
      b := GetTPABounds(ATPASkin[i]);
      b.Expand(4, MainScreen.getBounds());

      if (FindColorsTolerance(temp, Color.Color, b, Color.Tolerance, Color.Settings)) then
        TPA.Extend(temp);
    end;

  if (Length(TPA) < 10) then
    Exit(False);

  ATPA := ClusterTPAEx(TPA, 6, 6);
  SortATPAFromMidPoint(ATPA, Mainscreen.getMiddle());
  for i := 0 to High(ATPA) do
  begin
    TPA := MinAreaRectEx(ATPA[i], W, H);
    if (W >= MinWidth) and (H >= MinHeight) then
      Points += ATPA[i];
  end;

  Result := Length(Points) > 0;
end;

function TRSBankScreen._OpenNPC(Color: TColorEx): Boolean;
const
  UpText = ['Bank bank booth', 'Talk-to Banker', 'Bank Banker'];
  Option = ['Bank bank booth', 'Bank Banker'];
var
  ATPA: T2DPointArray;
  i: Integer;
  p: TPoint;
begin
  Result := False;
  if (Self.FindNPCs(Color, ATPA)) then
  begin
    for i := 0 to High(ATPA) do
    begin
      if (Random(5) = 0) then
        p := ATPA[i][Random(Length(ATPA[i]))]
      else
        p := MiddleTPA(ATPA[i]).Random(-4, 4);

      Mouse.Move(p);
      if (MainScreen.IsUpText(UpText, 500)) then
      begin
        if (ChooseOption.Open()) then
          if (ChooseOption.Select(Option)) then
          begin
            if (Minimap.isFlagPresent(Random(300, 400))) then
              Minimap.WaitFlag();

            Result := BankScreen.IsOpen(Random(4000, 6000));
            if (Result) then
              Exit(True);
          end;
      end;
    end;
  end;
end;


(*
BankScreen.Open
~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.Open(): Boolean;

Opens the bankscreen.
*)
function TRSBankScreen.Open(Typ: EBankType): Boolean;
const
  COLOR_NPC_GRAY: TColorEx = [6513771, 9, [2, [0.35, 0.10]]];
  COLOR_NPC_BLUE: TColorEx  = [4533549, 15, [2, [0.75, 0.96]]];
begin
  if (Self.isOpen()) then
    Exit(True);

  case Typ of
    btNPCGray, btNPCGrey: Result := Self._OpenNPC(COLOR_NPC_GRAY);
    btNPCBlue: Result := Self._OpenNPC(COLOR_NPC_BLUE);
  end;
end;


(*
BankScreen.Close
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.Close(): Boolean;

Closes the bankscreen, returns True on success
*)
function TRSBankScreen.Close(): Boolean;
var
  t: UInt64;
begin
  if (not Self.IsOpen()) then
    Exit(True);

  Self.ClickButton(bbClose);

  t := GetTickCount64() + Random(4000, 5000);
  while (t > GetTickCount64()) do
  begin
    if (not Self.IsOpen()) then
      Exit(True);

    Wait(Random(100, 200));
  end;
end;


(*
BankScreen.ClickButton
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.ClickButton(btn: EBankButton; clickType: Integer = mouse_Left): Boolean;

Toggles the button
*)
function TRSBankScreen.ClickButton(btn: EBankButton; clickType: Integer = mouse_Left): Boolean;
begin
  Result := Self.IsOpen();

  if (Result) then
    Mouse.Click(Self.fButtons[btn], clickType);
end;


(*
BankScreen.IsToggled
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.IsToggled(btn: EBankButton; minMatch:Int32=50): Boolean;

Checks if the given button is red/toggled
*)
function TRSBankScreen.IsToggled(btn: EBankButton; minMatch:Int32=50): Boolean;
begin
  Result := Self.IsOpen();
  if Result then
    Result := CountColorTolerance(1777019, Self.fButtons[btn], 30) > minMatch;
end;


{ Scrolls up to the top of the bank, so slots are aligned.}
procedure TRSBankScreen.FixSlots();
var
  t: UInt64;
begin
  if (not Self.IsOpen()) then
    Exit;

 t := GetTickCount64() + Random(7000, 8000);
 while (GetColor(491, 99) <> 65536) and (t > GetTickCount64()) do
 { Add mouse scroll helper thing to mouse.simba} ;

end;


function TRSBankScreen.GetSlotBox(Slot: UInt32): TBox;
begin
  if InRange(Slot, 0,High(Self.FSlots)) then
    Result := fSlots[Slot]; // range check.
end;


(*
BankScreen.ItemIn
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.ItemIn(Slot: UInt32): Boolean;

Returns True if there's an item in the given slot.
*)
function TRSBankScreen.ItemIn(Slot: UInt32): Boolean;
begin
  Result := CountColor($010000, self.GetSlotBox(slot)) <> 0;
end;


(*
BankScreen.DepositAll
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.DepositAll(): Boolean;

Depositis your inventory by clicking the deposit inventory button
*)
function TRSBankScreen.DepositAll(): Boolean;
begin
  if (Inventory.Count = 0) then
    Exit(True);
  
  Result := Self.ClickButton(bbDepositInv);
end;

(*
 Depeosit a single item, or all of it's kind from inventory.
*)
function TRSBankScreen.DepositItem(slot:Int32; depositAll:Boolean): Boolean;
begin
  if not(self.IsOpen()) or (not InRange(slot,0,27)) then
    Exit();

  Result := not inventory.SlotIsUsed(slot);
  if not(Result) then
  begin
    Mouse.Move(inventory.GetSlotBox(slot));
    Wait(srl.GaussRangeInt(30,70));
    if depositAll then
    begin
      ChooseOption.Open();
      Exit(ChooseOption.Select(['Deposit-All']));
    end else
    begin
      Mouse.Click(mouse_left);
      Result := True;
    end;
  end;
end;


(*
 Deposit all your items, retries two times.
*)
function TRSBankScreen.Deposit(slotArr:TIntegerArray): Boolean;
var
  i,j:Int32;
  t:UInt64;
begin
  if not(self.IsOpen()) then
    Exit();

  for j:=0 to 1 do
  begin
    Result := True;
    for i:=0 to High(slotArr) do
      if inventory.SlotIsUsed(slotArr[i]) then
      begin
        self.DepositItem(slotArr[i], False);
        Wait(srl.GaussRangeInt(6,25));
      end;

    for i:=0 to High(slotArr) do
      if InRange(slotArr[i],0,27) then
      begin
        t := GetTickCount64() + 200;
        repeat
          Result := not(inventory.SlotIsUsed(slotArr[i]));
        until (GetTickCount64() > t) or Result;
      end;

    if Result then
      Break
    else
      Wait(srl.GaussRangeInt(180,265)); //wait a bit before round 2
  end;
end;


(*
BankScreen.RearrangeMode
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.RearrangeMode(mode:EBankButton): Boolean;

Changes the way items are moved around, valid options are ``bbSwap`` and ``bbInsert``.
*)
function TRSBankScreen.RearrangeMode(mode:EBankButton): Boolean;
begin
  if not(mode in [bbSwap,bbInsert]) then
    RaiseException('Invalid rearrange mode: '+ToString(mode));

  Result := self.IsToggled(mode) or Self.ClickButton(mode);
end;


(*
BankScreen.WithdrawAs
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.WithdrawAs(mode:EBankButton): Boolean;

Changes the way items are withdrawn. Valid options are ``bbItem`` and ``bbNote``
*)
function TRSBankScreen.WithdrawAs(mode:EBankButton): Boolean;
begin
  if not(mode in [bbItem,bbNote]) then
    RaiseException('Invalid withdraw mode: '+ToString(mode));

  Result := self.IsToggled(mode) or Self.ClickButton(mode);
end;


(*
BankScreen.Search
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.Search(item:String): Boolean;

Search for an item using the search option in the bank.
*)
function TRSBankScreen.Search(item:String): Boolean;
const
  TEXT_AREA:TBox = [70,394,450,412];
begin
  if (not Self.IsOpen()) then
    Exit(False);
  if not(self.IsToggled(bbSearch) or Self.ClickButton(bbSearch)) then
    Exit(False);
  Result := self._ExpectText('Show items',TEXT_AREA,UpFont,FontSetting(0,2));

  keyboard.Send(item,VK_RETURN);
end;


(*
BankScreen.Withdraw
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSBankScreen.Withdraw(slot, amount:Int32; upText:TStringArray=[]; withdrawMode:EBankButton=bbItem): Boolean;

Withdraws the the amount ``amount`` from the bank slot ``slot``. If it fails to withdraw it will return False

Extra vaild constants for ``amount`` are:

   - ``WITHDRAW_AMOUNT_ALL = -1;``
   - ``WITHDRAW_AMOUNT_ALL_BUT_ONE = -2;``


.. note:: by slacky

Example:

.. code-block:: pascal

    // withdraw 28 items from slot 1 if uptext matches
    bankscreen.Withdraw(1, 28, ['Iron']);

    // withdraw 500 items as notes from slot 1 if uptext matches
    bankscreen.Withdraw(1, 500, ['Iron'], bbNote);

    // withdraw all items from slot 10 if uptext matches
    bankscreen.Withdraw(10, WITHDRAW_AMOUNT_ALL, ['Iron']);

    // withdraw 28 items from slot 1 and will *ignore* uptext
    bankscreen.Withdraw(1, 28);
*)
function TRSBankScreen.Withdraw(slot, amount:Int32; upText:TStringArray=[]; withdrawMode:EBankButton=bbItem): Boolean;
var
  b:TBox;
  options:TOptionArray;
const
  TEXT_AREA:TBox = [200,393,450,412];
begin
  if (not Self.IsOpen()) then
    Exit(False);
  b := self.GetSlotBox(slot);
  if not self.ItemIn(slot) then
    Exit(False);

  self.WithdrawAs(withdrawMode);
  Wait(srl.GaussRangeInt(90,170));
  mouse.Move(b);
  Wait(srl.GaussRangeInt(90,170));

  if (upText <> []) and not(Mainscreen.IsUptext(upText)) then
    Exit(False);

  if (amount = 1) then
  begin
    Mouse.Click(mouse_left);
    Exit(True);
  end else
  begin
    ChooseOption.Open();

    if amount = WITHDRAW_ALL then
      Result := ChooseOption.Select(['Withdraw-All'])

    else if amount = WITHDRAW_ALL_BUT_ONE then
      Result := ChooseOption.Select(['Withdraw-All-but-one'])

    else if ChooseOption.Select(['Withdraw-'+ToString(amount)+' '],,False) then  // space after amount so it can't find "2" in 28
      Result := True

    else if ChooseOption.Select(['Withdraw-X']) and
       self._ExpectText('Enter amount',TEXT_AREA,UpFont,FontSetting(0,2)) then
    begin
      keyboard.Send(ToString(amount),VK_RETURN);

      Result := True;
    end;
  end;
end;


begin
  BankScreen.__Setup();
end;
