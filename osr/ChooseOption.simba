type
  TOption = record
    str: String;
    bounds: TBox;
  end;
  TOptionArray = Array of TOption;

  TRSChooseOption = type TBox;

var
  ChooseOption: TRSChooseOption;

  BMP_ChooseOption: Int32;
  BMP_ChooseOption_Width:Int32;
  BMP_ChooseOption_Height:Int32;

{$IFNDEF CODEINSIGHT}
procedure TRSChooseOption.__setup();
begin
  BMP_ChooseOption := BitmapFromString(20, 18, 'meJxzD4l1pwAxkAsGj15Mv+DyGp' +
        'ogXBmyemL04lEzgHqxhgPxehkwwoEkN9NCLwMRcYRHL5rvSNVLPBhAvWQjAO6IcGE=');
  GetBitmapSize(BMP_ChooseOption, BMP_ChooseOption_Width, BMP_ChooseOption_Height);
end;

procedure __TRSChooseOption_Free(); 
begin 
  FreeBitmap(BMP_ChooseOption); 
end;

{$ENDIF}


function TRSChooseOption.__find(var Pos:TPoint; tryTime:Int32=-1): Boolean;
var 
  t: UInt32;
begin
  if tryTime < 0 then
    tryTime := Random(1500,2500);

  t := GetTimeRunning() + tryTime;
  while GetTimeRunning() < t do
  begin  
    Result := FindBitmap(BMP_ChooseOption, pos.x, pos.y);
    if Result then
    begin
      pos.y += BMP_ChooseOption_Height;
      Exit;
    end;
  end;
end;


function TRSChooseOption.IsOpen(tryTime:Int32=-1): Boolean;
var pt:TPoint;
begin
  if tryTime < 0 then
    tryTime := Random(1500,2500);
  Result := self.__find(pt, tryTime);
end;


function TRSChooseOption.Find(): Boolean;
var
  pt: TPoint;
  B:TBox;
  TPA:TPointArray;
  ATPA:T2DPointArray;
begin
  Self := [0,0,0,0];
  Result := Self.__find(pt);
  if Result then
  begin
    B := GetClientBounds(True);
    FindColors(TPA, 0, pt.x,pt.y,B.x2,B.y2);
    ATPA := ClusterTPAEx(TPA,1,1);
    SortATPAFrom(ATPA,pt);
    if Length(ATPA) = 0 then 
      RaiseException(erException,'No wai!! This is bullshit'); 
      
    Self := GetTPABounds(ATPA[0]);
    Self.Expand(1);
    //Self.Y1 := (Self.Y1 - BMP_ChooseOption_Height + 1);
    Self.LimitTo(GetClientBounds(False));
  end;
end;


function TRSChooseOption.GetOptions(): TOptionArray;
var
  b: TBox;
  i,bmp,oldT,T:Int32;
begin
  if not(self.Find()) then
    Exit();

  bmp := BitmapFromClient(Self.x1,Self.y1,Self.x2,Self.y2);
  FastReplaceColor(bmp,4674653,0);
  ThresholdAdaptiveBitmap(bmp,0,255,False,TM_Mean,-1);
  //set image as target
  oldT := GetImageTarget();
  T := SetTargetBitmap(bmp);
  SetImageTarget(T);

  SetLength(Result, (Self.y2 - Self.y1 + 1) div 15);
  for i:=0 to High(Result) do
  begin
    with B do
    begin
      x1 := 2;
      y1 := i * 15 + 2;
      x2 := (Self.x2 - Self.x1) - 2;
      y2 := y1 + 15;
    end;
    Result[i].str := GetTextAt(B.x1,B.y1+1, 0,3,2, 255, 0,150,'UpChars07');
    B.Offset(Point(Self.x1, Self.y1));
    Result[i].bounds := B;
  end;
  //return to old target
  FreeTarget(T);
  SetImageTarget(oldT);
  FreeBitmap(bmp);
end;


function TRSChooseOption.Open(tryTime:Int32=-1): Boolean;
var _:TPoint;
begin
  Mouse.Click(mouse_right);
  Result := self.__find(_, tryTime);
end;


function TRSChooseOption.Close(): Boolean;
var
  wid,hei:Int32;
  B:TBox;
begin
  GetClientDimensions(wid, hei);
  B := Self;
  B.y1 -= BMP_ChooseOption_Height;

  //move away from it preferably up.

end;


function TRSChooseOption.Select(SubStrings:TStringArray; mouseAction:Integer=mouse_left; AClose:Boolean=True; CaseSensitive:Boolean=True): Boolean;
var
  Choices: TOptionArray;
  i,j,L:Int32;
begin
  Choices := Self.GetOptions();
  L := Length(Choices);
  if L = 0 then
    Exit(False);

  for i:=0 to L-1 do
    for j:=0 to High(SubStrings) do
      case CaseSensitive of
        True:
          if Pos(SubStrings[j],Choices[i].str)<>0 then
          begin
            Mouse.Click(Choices[i].bounds, mouseAction);
            Exit(True);
          end;
        False:
          if Pos(Lowercase(SubStrings[j]),Lowercase(Choices[i].str))<>0 then
          begin
            Mouse.Click(Choices[i].bounds, mouse_left);
            Exit(True);
          end;
      end;

  if AClose then
    Self.Close();
end;

begin
  ChooseOption.__setup();
  AddOnTerminate('__TRSChooseOption_Free');
end;


