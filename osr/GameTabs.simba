type
  EGametab = (
    tabCombat,
    tabStats,
    tabQuests,
    tabInventory,
    tabEquipment,
    tabPrayer,
    tabMagic,
    tabClan,
    tabFriends,
    tabIgnores,
    tabLogout,
    tabOptions,
    tabEmotes,
    tabMusic
  );

  TRSGametab = type Pointer;

var
  Gametabs: TRSGametab;

function TRSGametab.GetBounds(Tab:EGametab): TBox;
var
  row,col:Int32;
  B:TBox;
begin
  col := Ord(Tab) mod 7;
  row := Ord(Tab) div 7;
  case Row of
    0: B := [527,168,760,204];
    1: B := [527,466,760,502]; 
    else Exit; //(it's impossible)
  end;
  Result := B.Partition(1, 7, -3)[col];
end;

function TRSGametab.IsOpen(Tab:EGametab): Boolean;
var
  B:TBox;
  _:Int32;
begin
  B := self.getBounds(Tab);
  if FindColorTolerance(_,_,1910383, B.x1,b.y1,b.x2,b.y2, 13) then
    Exit(True)
  else if (Tab = tabInventory) then
    Exit(Self.GetCurrent() = Tab);
end;

function TRSGametab.Open(Tab:EGametab; tries:Int32=2): Boolean;
var
  i:Int32;
  t:UInt64;
  B:TBox;
begin
  B := self.getBounds(Tab);
  if Self.IsOpen(Tab) then
    Exit(True);

  for i:=1 to tries do
  begin
    Mouse.Click(B, 1);
    t := GetTickCount64() + Random(1500,2500);
    repeat
      if self.IsOpen(Tab) then
        Exit(True);
    until (GetTickCount64() > t);
  end;
end;


procedure TRSGametab.Hover(Tab:EGametab; Condition:Boolean=True);
var
  t,i:Int32;
  B:TBox;
begin
  if Condition then
  begin
    B := self.getBounds(Tab);
    Mouse.Move(B);
  end;
end;


function TRSGametab.GetCurrent(): EGametab;
var i:Int32;
begin
  for i:=0 to High(EGameTab) do
    if Self.IsOpen(EGameTab(i)) then
      Exit(EGameTab(i));
  Result := tabInventory; //assume tab inventory.
end;

{$include_once gametabs/combat.simba}
{$include_once gametabs/stats.simba}
{$include_once gametabs/inventory.simba}
{$include_once gametabs/equipment.simba}

{$include_once gametabs/logout.simba}
{$include_once gametabs/options.simba}

