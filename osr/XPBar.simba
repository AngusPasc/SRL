type
  TXPBar = record
    btnMiddle: TPoint;
    btnBounds: TBox;
    btnRadius: Byte;

    TextArea: TBox;
 end;

var
  XPBar: TXPBar;

procedure TXPBar._Setup;
begin
  btnBounds := [519, 23, 541, 45];
  btnMiddle := [530, 34];
  btnRadius := 10;

  TextArea := [402, 9, 512, 28];
end;

function TXPBar.isEnabled(WaitTime: Integer = 0): Boolean;
var
  b: TBox;
  t: UInt64;
begin
  b := btnBounds;
  if (WaitTime = 0) then
    Result := CountColor(11592943, b) > 0
  else
    Result := srl.WaitMinColorCount(11592943, 0, b, 1, WaitTime);
end;

function TXPBar.Toggle(const Enable: Boolean): Boolean;
begin
  Result := True;

  with Self do
  begin
    if (Enable) and (not Self.isEnabled) then
    begin
      Mouse.Click(btnMiddle, btnRadius, mouse_Left);
      Result := Self.isEnabled(Random(600, 1000));
    end
    else
    if (not Enable) and (Self.isEnabled) then
    begin
      Mouse.Click(btnMiddle, btnRadius, mouse_Left);
      Result := not Self.isEnabled(Random(250, 500));
    end;
  end;
end;

function TXPBar.Read: Integer;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  t: UInt64;
begin
  if (not Self.isEnabled()) then
  begin
    if (not Self.Toggle(True)) then
      Exit(-1); // cant toggle

    Wait(Random(850, 1050)); // We enabled it, takes a few secs to appear
  end;

  if (not FindColors(TPA, 16777215, Self.TextArea)) then
    Exit(-2); // no color

  case GetTPABounds(TPA).Height of // Support all font sizes!
    10: Result := StrToIntDef(ExtractFromStr(srl.GetTextFromTPA(TPA, 1, 1, 10, 'UpChars07_s'), Numbers), -1);
    11: Result := StrToIntDef(ExtractFromStr(srl.GetTextFromTPA(TPA, 1, 1, 10, 'SmallChars07'), Numbers), -1);
    8: Result := StrToIntDef(ExtractFromStr(srl.GetTextFromTPA(TPA, 1, 1, 10, 'StatChars07'), Numbers), -1);
  else
    Exit(-3); // unknown font
  end;
end;

begin
  XPBar._Setup;
end;
