(*
Stats
=======
The file holds functions and procedures that are related to the stats gametab
*)

type 
  TRSStats = record(TInterfaceBase)
    FSlots: TBoxArray;
  end;

{==| Table of Contents |=======================
 procedure TRSStats.__setup();
 function TRSStats.Open(): Boolean;
 function TRSStats.IsOpen(): Boolean;
 function TRSStats.GetSkillBox(skill:Int32): TBox;
 function TRSStats.MouseOver(skill:Int32): Int32;
}

(*
var stats
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape stats gametab.
*)
var 
  stats: TRSStats;

const
  SKILL_ATTACK     = 0;
  SKILL_HITPOINTS  = 1;
  SKILL_MINING     = 2;
  SKILL_STRENGTH   = 3;
  SKILL_AGILITY    = 4;
  SKILL_SMITHING   = 5;
  SKILL_DEFENCE    = 6;
  SKILL_HERBLORE   = 7;
  SKILL_FISHING    = 8;
  SKILL_RANGE      = 9;
  SKILL_THIEVING   = 10;
  SKILL_COOKING    = 11;
  SKILL_PRAYER     = 12;
  SKILL_CRAFTING   = 13;
  SKILL_FIREMAKING = 14;
  SKILL_MAGIC      = 15;
  SKILL_FLETCHING  = 16;
  SKILL_WOODCUTTING  = 17;
  SKILL_RUNECRAFTING = 18;
  SKILL_SLAYER     = 19;
  SKILL_FARMING    = 20;
  SKILL_CONSTRUCTION = 21;
  SKILL_HUNTER     = 22;
  SKILL_TOTAL      = 23;


{$IFNDEF CODEINSIGHT}
procedure TRSStats.__setup();
var i:Int32;
begin
  with Self do
  begin
    FName := 'Inventory';
    FStatic := True;
    FBounds := [548,206,735,454];
    FSlots := FBounds.Partition(8, 3);
  end;
end;
{$ENDIF}


(*
stats.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSStats.Open(): Boolean;

Opens the interface
*)
function TRSStats.Open(): Boolean;
begin
  Result := Gametabs.Open(tabStats);
end;


(*
stats.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSStats.IsOpen(): Boolean;

Checks if the interface is already open.
*)
function TRSStats.IsOpen(): Boolean;
begin
  Result := Gametabs.IsOpen(tabStats);
end;


(*
stats.SkillIsVaild
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSStats.SkillIsVaild(skill:Int32): Boolean;

---
*)
function TRSStats.SkillIsVaild(skill:Int32): Boolean;
begin
  Result := InRange(skill, 0, High(Self.FSlots));
end;


(*
stats.GetSkillBox
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSStats.GetSkillBox(skill:Int32): TBox;

Returns the bounding box covering the given skill-index.

.. note:: by slacky
*)
function TRSStats.GetSkillBox(skill:Int32): TBox;
begin
  if not(self.Open()) then Exit();
  
  if Self.SkillIsVaild(skill) then
    Result := Self.FSlots[skill]
  else
    {notify index out of range};
end;


(*
stats.MouseOver
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSStats.MouseOver(skill:Int32): Int32;

Moves the moise over the given skill-index.

.. note:: by slacky
*)
function TRSStats.MouseOver(skill:Int32): Int32;
begin
  if not(self.Open()) then Exit();
  
  if Self.SkillIsVaild(skill) then
    Mouse.Move(Self.FSlots[skill])
  else
    {notify index out of range};
end;


begin
  Stats.__setup();
end;
