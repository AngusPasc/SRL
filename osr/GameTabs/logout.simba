(*
Logout
=======
The file holds functions and procedures that are in the logout-tab.
*)

type
  TRSLogoutWorldSwitcher = type TInterfaceBase;

(*
type TRSLogout
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape logout-tab.
*)
type
  TRSLogout = record(TInterfaceBase)
    WorldSwitcher: TRSLogoutWorldSwitcher;
    LogoutButton: TBox;
  end;

{==| Table of Contents |=======================
 procedure TRSLogout.__setup();
 function TRSLogout.Open(): Boolean;
 function TRSLogout.IsOpen(): Boolean;
 function TRSLogout.ClickLogout(attempts:Int32=3; tryTime:Int32=20000): Boolean;
}

(*
var logout
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape logout interface.
*)
var 
  logout: TRSLogout;
  
{$IFNDEF CODEINSIGHT}
procedure TRSLogout.__setup();
var i:Int32;
begin
  with Self do
  begin
    FName := 'Logout';
    FStatic := True;
    FBounds := [550,206,733,464];
    LogoutButton := [575,405,708,431];
  end;
end;
{$ENDIF}

(*
combat.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.Open(): Boolean;

Opens the interface
*)
function TRSLogout.Open(): Boolean;
begin
  Result := Gametabs.Open(tabLogout);
  if (Result) and (Self.WorldSwitcher.isOpen()) then
    WorldSwitcher.Close();
end;

(*
combat.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.IsOpen(): Boolean;

Checks if the interface is already open.
*)
function TRSLogout.IsOpen(): Boolean;
begin
  Result := Gametabs.IsOpen(tabLogout) and (not Self.WorldSwitcher.isOpen());
end;

(*
logout.ClickLogout
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;

Clicks the logout button, by default retires 3 times over 20 seconds.
*)
function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;
var 
  state:boolean;
  t,r:UInt64;
begin
  if not(self.Open()) then
    Exit(False);

  r := 3153;
  Inc(tryTime, attemts * r div 2);
  for 1 to attemts do
  begin
    mouse.click(Self.LogoutButton, mouse_left);
    t := GetTickCount64() + (tryTime div attemts);
    repeat
      if (CountColorTolerance(1777019, Self.LogoutButton, 30) < 100) then
        Exit(True)
      else
        Wait(25);
    until GetTickCount64() > t;
    Wait(srl.GaussRangeInt(0,r));
  end;
end;

{$IFNDEF CODEINSIGHT}
procedure TRSLogoutWorldSwitcher.__Setup();
var i:Int32;
begin
  with Self do
  begin
    FName := 'Logout world switcher';
    FStatic := True;
    FBounds := [550, 206, 733, 464];
  end;
end;
{$ENDIF}

function TRSLogoutWorldSwitcher.isOpen(WaitTime: Integer = 0): Boolean;
var
  t: UInt64;
  p: TPoint;
begin
  if (not Gametabs.IsOpen(tabLogout)) then
    Exit(False);
  if (WaitTime = 0) then
    Exit(srl.FindText(p, 'Current world', 'UpChars07_s', Self.GetBounds()));

  t := GetTickCount64() + WaitTime;
  repeat
    if (srl.FindText(p, 'Current world', 'UpChars07_s', Self.GetBounds())) then
      Exit(True);
    Wait(Random(50, 100));
  until (GetTickCount64() > t);

  Result := False;
end;

function TRSLogoutWorldSwitcher.ClickWorld(World: Integer): Boolean;

  // 302 to 2
  function ShortWorld(wo: Integer): Integer;
  var
    s: String;
  begin
    s := IntToStr(wo);
    if (Length(s) = 3) then
    begin
      s := Copy(s, 2, 2);
      if (s[1] = '0') then
        s := s[Length(s)];
    end;
    Exit(StrToInt(s));
  end;

const
  TEXT_COLORS = [14737632, 61680];
var
  t: UInt64;
  i, j: Integer;
  Down: Boolean = True;
  WorldBox: TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
  wo: String;
begin
  Result := False;
  wo := toString(ShortWorld(world));
  WorldBox := Box(565, 229, 585, 431);
  t := GetTickCount64() + Random(8000, 10000);

  while (t > GetTickCount64()) do
  begin
    if (FindColors(TPA, 0, WorldBox)) then
    begin
      ATPA := ClusterTPAEx(TPA, 20, 2); // Get bounds of each world number
      for i := 0 to High(ATPA) do
      begin
        TBox(b := GetTPABounds(ATPA[i])).Expand(2);

        for j := 0 to High(TEXT_COLORS) do
          if (GetTextAtEx(b, 0, 3, 0, TEXT_COLORS[j], 0, 'SmallChars07') = wo) then
          begin
            b.X1 -= 15;
            b.X2 += 130;
            Mouse.Click(b, mouse_Left);
            Exit(True);
          end;
      end;
    end;

    Mouse.Scroll(Box(551, 230, 727, 430), Random(2, 5), Down);
    if (GetColor(730, 416) = 65536) then  // scroll bar at bottom = we scroll up!
      Down := False;
  end;
end;

function TRSLogoutWorldSwitcher.SwitchToWorld(World: Integer): Boolean;
var
  opts: array of TChatOption;
  t: UInt64;
begin
  if (not Self.Open()) then
    Exit(False);
  if (not ClickWorld(World)) then
    Exit(False);

  Result := True;
  Chatbox.ClickOption(['Yes.'], Random(2000, 2500));
  Mainscreen.WaitWhileLoading();
end;

function TRSLogoutWorldSwitcher.Open(): Boolean;
begin
  if (not Self.isOpen()) then
    if (Logout.Open()) then
      if (not Self.isOpen()) then
        srl.MouseText('World Switcher', 'UpChars07_s', Self.getBounds(), mouse_Left);

  Result := Self.isOpen(Random(3000, 4000));
end;

procedure TRSLogoutWorldSwitcher.Close();
begin
  Mouse.Click(Box(716, 207, 734, 225), mouse_Left);
  Wait(Random(250, 500));
end;

begin
  logout.__Setup();
  logout.WorldSwitcher.__Setup();
end;
