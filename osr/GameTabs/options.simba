(*
Options
=======
The options file holds functions and procedures that are used for configuring runescape.
*)

(*
type TRSOptions
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape options interface.
*)   
type 
  TRSOptions = record(TInterfaceBase)
    FTabs: TBoxArray;
  end;

{==| Table of Contents |=======================
 procedure TRSOptions.__setup();
 function TRSOptions.Open(): Boolean;
 function TRSOptions.IsOpen(): Boolean;
 function TRSOptions.IsButtonBoxEnabled(B:TBox): Boolean;
 function TRSOptions.ClickButtonBox(B:TBox; out enabled:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.GetCurrentTab(): EOptionsTab;
 function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
 function TRSOptions.GetBrightness(): Int32;
 function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
 function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
}

(*
var options
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape options interface.
*)
var 
  options: TRSOptions;


(*
type EOptionsTab
~~~~~~~~~~~~~~~
A type that covers the internal tabs in TRSOptions: ``EOptionsTab = (optDisplay, optAudio, optChat, optControls)``
*)
type
  EOptionsTab = (optDisplay, optAudio, optChat, optControls);

  
{$IFNDEF CODEINSIGHT}
procedure TRSOptions.__setup();
var i:Int32;
begin
  self.FBounds := [550,206,733,464];
  
  with Self do
  begin
    FName := 'Options';
    FStatic := True;
  end;

  //the four tabs (Display, Audio, Chat, Controls)
  Self.FTabs += TBox([553,206,592,245]);
  Self.FTabs += TBox([599,206,638,245]);
  Self.FTabs += TBox([645,206,684,245]);
  Self.FTabs += TBox([691,206,730,245]);
end;
{$ENDIF}

(*
options.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.Open(): Boolean;

Opens the interface
*)
function TRSOptions.Open(): Boolean;
begin
  Result := Gametabs.Open(tabOptions);
end;

(*
options.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.IsOpen(): Boolean;

Checks if the interface is already open.
*)
function TRSOptions.IsOpen(): Boolean;
begin
  Result := Gametabs.IsOpen(tabOptions);
end;

//helper: Checks if the given button (by bounds) is red/enabled 
function TRSOptions.IsButtonBoxEnabled(B:TBox): Boolean;
begin
  if not(self.Open()) then
    Exit(False);
  Result := CountColorTolerance(1777019, B, 30) > 100;
end;

//helper: Clicks the given button and returns True if it didn't fail
function TRSOptions.ClickButtonBox(B:TBox; out enabled:Boolean; tryTime:Int32=2000): Boolean;
var t:UInt64;
begin
  if not(self.Open()) then
    Exit(False);

  enabled := not(Self.IsButtonBoxEnabled(B));
  mouse.click(B, mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    Result := Self.IsButtonBoxEnabled(B) = enabled;
    if not(Result) then Wait(25);
  until (GetTickCount64() > t) or Result;
end;

//helper: Changes tab, and toggles the given button returns True if it didn't fail
function TRSOptions.__toggleButton(button:TBox; tab:EOptionsTab; enable:Boolean; tryTime:Int32): Boolean;
var
  enabled:Boolean;
begin
  if not(self.SetCurrentTab(tab)) then
    Exit(False);
  if Self.IsButtonBoxEnabled(button) = enable then
    Result := True
  else
    Result := self.ClickButtonBox(button, enabled, tryTime);
end;


(*
options.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.GetCurrentTab(): EOptionsTab;

Returns which tab is currently active.
*)
function TRSOptions.GetCurrentTab(): EOptionsTab;
var i,curr,best:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(FTabs) do
    if Self.IsButtonBoxEnabled(FTabs[i]) then
      Exit(EOptionsTab(i));
end;

(*
options.SetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.SetCurrentTab(Tab: EOptionsTab; tryTime:Int32=2000): Boolean;

Sets the current tab to the given ``Tab``
*)
function TRSOptions.SetCurrentTab(tab: EOptionsTab; tryTime:Int32=2000): Boolean;
var
  curr:EOptionsTab;
  t:UInt64;
  wasOpen:Boolean;
begin
  wasOpen := self.IsOpen();
  if not(self.Open()) then 
    Exit();
  if not(wasOpen) then
    Wait(srl.GaussRangeInt(20,300));

  if Self.GetCurrentTab() = tab then Exit(True);

  Mouse.Click(Self.FTabs[ord(tab)], mouse_left);
  t := GetTickCount64()+tryTime;
  repeat
    if Self.IsButtonBoxEnabled(FTabs[ord(tab)]) then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;

(*
options.GetBrightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.GetBrightness(): Int32;

Returns the mainscreen brightness
*)
function TRSOptions.GetBrightness(): Int32;
var
  x,y:Int32;
  range:TBox = [609,283,718,296];
begin
  if not(self.SetCurrentTab(optDisplay)) then
    Exit(-1);
  if not(FindColorTolerance(x,y, 9584920, range, 35)) then
    Exit(-1);
  Result := Round((x - range.x1)/(range.x2-range.x1+1)*3);
end;


(*
options.SetBrightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;

Sets the mainscreen brightness
*)
function TRSOptions.SetBrightness(level: Int32; tryTime:Int32=2000): Boolean;
var
  t:UInt64;
  spacing:Int32=31;
  range:TBox = [609,283,718,296];
begin
  if not(self.SetCurrentTab(optDisplay)) or not(InRange(level, 0,3)) then
    Exit(False);

  if (self.GetBrightness() = level) then
    Exit(True);

  with range do
    Mouse.Click(TBox([x1+spacing*level,y1,x1+spacing*level+12,y2]), mouse_left);

  t := GetTickCount64()+tryTime;
  repeat
    if self.GetBrightness() = level then
      Exit(True)
    else
      Wait(25);
  until GetTickCount64() > t;
end;


(*
options.ToggleOrbs
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the orb button to the given state.
*)
function TRSOptions.ToggleOrbs(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([567,326,604,363], optDisplay, enable, tryTime);
end;

(*
options.ToggleRoofRemoval
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRoofRemoval(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([623,326,661,363], optDisplay, enable, tryTime);
end;

(*
options.ToggleRemainingXP
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRemainingXP(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([680,326,718,363], optDisplay, enable, tryTime);
end;

(*
options.ToggleAcceptAid
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleAcceptAid(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [566,425,604,464];
begin
  if Self.IsButtonBoxEnabled(button) = enable then
    Result := True
  else
    Result := self.ClickButtonBox(button, enabled, tryTime);
end;

(*
options.ToggleRun
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleRun(enable:Boolean; tryTime:Int32=2000): Boolean;
var
  enabled:Boolean;
  button:TBox = [622,425,661,464];
begin
  if Self.IsButtonBoxEnabled(button) = enable then
    Result := True
  else
    Result := self.ClickButtonBox(button, enabled, tryTime);
end;


(*
options.ToggleChatEffects
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleChatEffects(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([586,284,625,323], optChat, enable, tryTime);
end;

(*
options.ToggleSplitPrivChat
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleSplitPrivChat(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([658,284,697,323], optChat, enable, tryTime);
end;


(*
options.ToggleProfanityFilter
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button to the given state.
*)
function TRSOptions.ToggleProfanityFilter(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([586,347,625,386], optChat, enable, tryTime);
end;

(*
options.ToggleTimeoutNotice
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;

Changes the state of the button for "Login/Logout notification timeout" to the given state.
*)
function TRSOptions.ToggleTimeoutNotice(enable:Boolean; tryTime:Int32=2000): Boolean;
begin
  Result := self.__toggleButton([658,347,697,386], optChat, enable, tryTime);
end;


begin
  options.__setup();
end;
