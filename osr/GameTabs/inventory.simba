(*
Inventory
=======
The inventory file holds functions and procedures that are related 
to the runescape inventory
*)

(*
type TRSInventory
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape inventory gametab.
*)
type 
  TRSInventory = record(TInterfaceBase)
    FSlots: TBoxArray;
    LowSlot, HighSlot: Byte;
  end;

{==| Table of Contents |=======================
 procedure TRSInventory.__setup();
 function TRSInventory.Open(): Boolean;
 function TRSInventory.IsOpen(): Boolean;
 function TRSInventory.PointToSlot(pt:TPoint): Int32;
 function TRSInventory.IsFull(): Boolean;
 function TRSInventory.SlotIsVaild(idx: Int32): Boolean;
 function TRSInventory.GetSlotBox(idx:Int32): TBox;
 function TRSInventory.SlotIsUsed(idx:Int32): Boolean;
 function TRSInventory.GetUsedSlots(): TIntegerArray;
 procedure TRSInventory.DropItems(slotArr:TIntegerArray = DROP_PATTERN_REGULAR);
 procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; dropPattern:TIntegerArray = DROP_PATTERN_REGULAR);
}

(*
var inventory
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape inventory gametab.
*)
var 
  inventory: TRSInventory;

const
    //Column wise (Z-style) and "reversed" column wise (S-style)
    DROP_PATTERN_REGULAR   = [0..27];
    DROP_PATTERN_REGULAR_R = [3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12, 19,18,17,16, 23,22,21,20, 27,26,25,24];

    //Column wise (zigzag-style) and "reversed" version
    DROP_PATTERN_SNAKE   = [0,1,2,3, 7,6,5,4, 8,9,10,11, 15,14,13,12, 16,17,18,19, 23,22,21,20, 24,25,26,27];
    DROP_PATTERN_SNAKE_R = [3,2,1,0, 4,5,6,7, 11,10,9,8, 12,13,14,15, 19,18,17,16, 20,21,22,23, 27,26,25,24];

    //by row (and "reversed")
    DROP_PATTERN_TOPDOWN   = [0,4,8,12,16,20,24,  1,5,9,13,17,21,25,  2,6,10,14,18,22,26, 3,7,11,15,19,23,27];
    DROP_PATTERN_TOPDOWN_R = [3,7,11,15,19,23,27, 2,6,10,14,18,22,26, 1,5,9,13,17,21,25,  0,4,8,12,16,20,24];


{$IFNDEF CODEINSIGHT}
procedure TRSInventory.__setup();
var i:Int32;
begin
  self.FBounds := [558,211,725,462];
  self.FSlots := self.FBounds.Partition(7, 4, -2);
  for i:=0 to High(self.FSlots) do
  begin
    self.FSlots[i].x1 += 3;
    self.FSlots[i].x2 -= 3;
  end;
  
  with Self do
  begin
    FName := 'Inventory';
    FStatic := True;
    LowSlot := 0;
    HighSlot := 27;
  end;
end;
{$ENDIF}


//given a pattern an a upper limit of "errors", it will swap around some values and return a "errorized" drop-pattern
function TRSInventory.ErrorPattern(Pattern: TIntegerArray=DROP_PATTERN_REGULAR; MaxErrors:Int32=5): TIntegerArray;
var i,j,h,errors:Integer;
begin
  Result := Copy(Pattern);
  h := High(Pattern);
  errors := Trunc(srl.TruncatedGauss(0,MaxErrors));
  for i:=1 to Errors do
  begin
    j := RandomRange(1,h);
    Swap(Result[j], Result[j-1]);
  end;
end;

(*
inventory.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.Open(): Boolean;

Opens the interface
*)
function TRSInventory.Open(): Boolean;
begin
  Result := Gametabs.Open(tabInventory);
end;


(*
inventory.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsOpen(): Boolean;

Checks if the interface is already open.
*)
function TRSInventory.IsOpen(): Boolean;
begin
  Result := Gametabs.IsOpen(tabInventory);
end;

(*
inventory.SlotIsVaild
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.SlotIsVaild(idx: Int32): Boolean;

Returns true if the given slot is within a valid range.

.. note:: by slacky
*)
function TRSInventory.SlotIsVaild(idx: Int32): Boolean;
begin
  Result := InRange(idx, Low(Self.FSlots), High(Self.FSlots));
end;

(*
inventory.PointToSlot
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.PointToSlot(pt:TPoint): Int32;

Returns the slot-index under the given TPoint. 
If it's not over a slot then -1 is returned

.. note:: by slacky
*)
function TRSInventory.PointToSlot(pt:TPoint): Int32;
var
  x,y,w:Int32;
const
  SLOT_WIDTH = 42; //inc. padding
  SLOT_HEIGHT= 36; //..
begin
  if not(PointInBox(Pt, Self.FBounds)) then
    Exit(-1);

  x := (Pt.x - Self.FBounds.x1) div SLOT_WIDTH;
  y := (Pt.y - Self.FBounds.y1) div SLOT_HEIGHT;
  w := (Self.FBounds.X2 - Self.FBounds.X1) + 1;
  Result := (y * (w div SLOT_WIDTH)) + x;
  if not(PointInBox(pt, Self.FSlots[Result])) then
    Result := -1;
end;

(*
inventory.MouseSlot
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.MouseSlot(idx:Int32; btn: Integer = mouse_Move);

Moves the moise over the given slot-index.

.. note:: by slacky
*)
procedure TRSInventory.MouseSlot(idx:Int32; btn: Integer = mouse_Move);
begin
  if self.SlotIsVaild(idx) then
  begin
    Mouse.Move(self.FSlots[idx])
    if (btn <> mouse_Move) then
      Mouse.Click(btn);
  end else
    {notify index out of range};
end;

(*
inventory.IsFull
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.IsFull(): Boolean;

Returns True if the inventory can't hold anymore items

.. note:: by slacky
*)
function TRSInventory.IsFull(): Boolean;
var
  i:Int32;
  b:TBox;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(self.FSlots) do
  begin
    b := self.FSlots[i];
    if (CountColor($10000, b.x1,b.y1,b.x2,b.y2) = 0) then
      Exit(False);
  end;
  Result := True;
end;

(*
inventory.GetSlotBox
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetSlotBox(idx:Int32): TBox;

Returns the bounding box covering the given slot-index.

.. note:: by slacky
*)
function TRSInventory.GetSlotBox(idx:Int32): TBox;
begin
  if self.SlotIsVaild(idx) then
    Result := Self.FSlots[idx]
  else
    {notify index out of range};
end;

(*
inventory.SlotIsUsed
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.SlotIsUsed(idx:Int32): Boolean;

Returns true if the given slot is occupied.

.. note:: by slacky
*)
function TRSInventory.SlotIsUsed(idx:Int32): Boolean;
var b:TBox;
begin
  if not(self.Open()) then
    Exit();

  b := self.FSlots[idx];
  Result := CountColor($10000, b.x1,b.y1,b.x2,b.y2) > 0;
end;

(*
inventory.GetUsedSlots
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.GetUsedSlots(idx:Int32): TIntegerArray;

Returns all the occupied slot-indices.

.. note:: by slacky
*)
function TRSInventory.GetUsedSlots(): TIntegerArray;
var i:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(self.FSlots) do
    if Self.SlotIsUsed(i) then
      Result += i;
end;

(*
inventory.DropItems
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSInventory.DropItems(slotArr:TIntegerArray = DROP_PATTERN_REGULAR);

Drops the given items. It's order-sensitive which means unless you want it to 
jump randomly all over the inventory dropping items, you give it a ordered drop-pattern.

.. note:: by slacky

Examples:
.. code-block:: pascal

    // drops all items in a "snake order" / "Z"-order
    inventory.DropItems(DROP_PATTERN_SNAKE);

.. code-block:: pascal

    inventory.DropItems([0..3]); // drops the four first items
*)
procedure TRSInventory.DropItems(slotArr:TIntegerArray = DROP_PATTERN_REGULAR);
var i:Int32;
begin
  if not(self.Open()) then
    Exit();

  for i:=0 to High(slotArr) do
    if self.SlotIsVaild(slotArr[i]) and self.SlotIsUsed(slotArr[i]) then
    begin
      Mouse.Move(self.FSlots[slotArr[i]]);
      //Check uptext?
      ChooseOption.Open();
      ChooseOption.Select(['Drop']);
      wait(120 + random(100));
    end;
end;

(*
inventory.DropItemsExcept
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; dropPattern:TIntegerArray = DROP_PATTERN_REGULAR);

Drops all the given items ``dropPattern`` except for the items in ``ignoreSolots``

.. note:: by slacky
*)
procedure TRSInventory.DropItemsExcept(ignoreSlots:TIntegerArray; dropPattern:TIntegerArray = DROP_PATTERN_REGULAR);
var
  i:Int32;
  ptrn:TIntegerArray;
begin
  for i:=0 to High(dropPattern) do
    if not(InIntArray(ignoreSlots,dropPattern[i])) then
      ptrn += dropPattern[i];
  Self.DropItems(ptrn);
end;

function TRSInventory.FindItems(const Mask: TMask; Tolerance: Byte = 30; ContourTolerance: Byte = 30; MaxToFind: Byte = 28): TIntegerArray;
var
  i: Integer;
  p: TPoint;
begin
  for i := Self.LowSlot to Self.HighSlot do
    if (FindMaskTolerance(Mask, p.x, p.y, Self.GetSlotBox(i), Tolerance, ContourTolerance)) then
    begin
      Result += i;
      if (Length(Result) = MaxToFind) then
        Break;
    end;
end;

function TRSInventory.FindItem(const Mask: TMask; Tolerance: Byte = 30; ContourTolerance: Byte = 30): Integer;
var
  a: TIntegerArray;
begin
  Result := -1; // not found
  a := Self.FindItems(Mask, Tolerance, ContourTolerance, 1);
  if (Length(a) > 0) then
    Result := a[Low(a)];
end;

function TRSInventory.FindItems(const bmp: Integer; Tolerance: Byte; MaxToFind: Byte = 28): TIntegerArray; overload;
var
  i: Integer;
  p: TPoint;
begin
  for i := Self.LowSlot to Self.HighSlot do
    if (FindBitmapToleranceIn(bmp, p.x, p.y, Self.GetSlotBox(i), Tolerance)) then
    begin
      Result += i;
      if (Length(Result) = MaxToFind) then
        Break;
    end;
end;

function TRSInventory.FindItem(const bmp: Integer; Tolerance: Byte): Integer; overload;
var
  a: TIntegerArray;
begin
  Result := -1; // not found
  a := Self.FindItems(bmp, Tolerance, 1);
  if (Length(a) > 0) then
    Result := a[Low(a)];
end;


function TRSInventory.Count(): Byte;
begin
  Result := Length(Self.GetUsedSlots());
end;

function TRSInventory.GetActiveSlot(): Byte;
var
  i: Integer;
  b: TBox;
begin
  Result := -1;
  for i := 0 to High(Self.FSlots) do
  begin
    b := self.FSlots[i];
    if (CountColor(16777215, b.x1,b.y1,b.x2,b.y2) > 10) then
      Exit(i);
  end;
end;

function TRSInventory.ActivateSlot(const Slot: Integer): Boolean;
var
  a: Byte;
begin
  Result := False;
  if (Slot = -1) and ((a := Self.GetActiveSlot()) > -1) then
  begin
    Self.MouseSlot(a);
    Mouse.Click(mouse_Left);
    Result := True;
  end else
  begin
    a := Self.GetActiveSlot();
    if (a = Slot) then
      Exit(True);
    Self.ActivateSlot(-1); // un-activate a slot if needed
    Self.MouseSlot(Slot);
    if (ChooseOption.Open()) then
      Result := ChooseOption.Select(['Use']);
  end;
end;


begin
  Inventory.__setup();
end;
