const
  DIR_NORTH = 0.00;
  DIR_EAST  = 90.0;
  DIR_SOUTH = 180.0;
  DIR_WEST  = 270.0;

type
  EMinimapOrb = (MMOrbHP, MMOrbPrayer, MMOrbRun);
  EMinimapDotType = (MMDotPlayer, MMDotItem, MMDotNPC);

type
  TMMOrbInfo = record
    TextBox: TBox;
    Middle: TPoint;
    Radius: Byte;
 end;

type
  TMMCompassInfo = record
    Middle: TPoint;
    Bounds: TBox;
    Radius: Byte;
 end;

  TMinimap = record (TInterfaceBase)
    CompassInfo: TMMCompassInfo;
    OrbInfo: array [0..High(EMinimapOrb)] of TMMOrbInfo;
    MaskBMP: Integer;
 end;

var
  Minimap: TMinimap;

procedure TMinimap.__Free();
begin
  if (BitmapExists(Self.MaskBMP)) then
    FreeBitmap(Self.MaskBMP);
end;

procedure TMinimap.__Setup();
begin
  with (Self) do
  begin
    SetName('Minimap');
    SetStatic(True);
    SetBounds([570, 9, 716, 157]);

    with (CompassInfo) do
    begin
      Bounds := [545, 4, 576, 36];
      Middle := [561, 20];
      Radius := 15;
    end;

    with (OrbInfo[Ord(MMOrbHP)]) do
    begin
      Middle := [555, 57];
      Radius := 13;
      TextBox := [520, 55, 539, 68];
    end;

    with (OrbInfo[Ord(MMOrbPrayer)]) do
    begin
      Middle := [581, 136];
      Radius := 15;
      TextBox := [521, 99, 540, 112];
    end;

    with (OrbInfo[Ord(MMOrbRun)]) do
    begin
      Middle := [581, 136];
      Radius := 11;
      TextBox := [545, 135, 564, 148];
    end;

    AddOnTerminate(@Self.__Free);

    Self.MaskBMP := BitmapFromString(147, 147, 'meJzt3V1u01AYBuHsf8kQCqqQ' +
                   'UmiC4/jnzJkyzwo+v3PhG0u+XL6On4vo6/5ry2n2oJ/sazqvVwXPM' +
                   'LJXBfdje92j95gd3ec5eqG50DW2oDeD0fPvRe8HoCc/Er3lOPTSx6' +
                   'MXPR098LnodU9BjzoOvfRh6CEZ9Op70fuR6O23o5fj0QVeRg82F7r' +
                   'GWvROM6KbPEcvNC+6zBJ6m9nRfR6gJzGhW32gl/Chi72jN7CqmlfV' +
                   'vKrmVTWvwklVzatqXlXzqppX4aSq5lU1r6p5FU6qal6Fk6qaV+Gkq' +
                   'uZVNa/CSVXNq3BSVfMqnFThpKrmVTipwklVzatwUoWTKpxU1bwKJ1' +
                   'U4qapJFU6qcEa94KQKJ1U4qcJJFU6qcFKFkyqcVOGkCidVOKnCSRV' +
                   'Oqk8XjC5/o8/JWoWTKpxU4aQKJ1U4qcsd+qI8d1+tcAqFkyqcVOGk' +
                   'CidVOKmH4Wo3uX9VK9zkCie1EK5201quVrhpFU7qabjaTWhNtcJNq' +
                   'HBbvL3RF/TfgS1+XK/sAeurFe5P12/f2QNeCle7Gzbcq9UKd6MLVz' +
                   'vctmqFw20OVzvQnmq1o+yvVrvxjqpWuMEODFe7YY6tVrsxzqhWu7O' +
                   'dV618JxmQrHaHG1mtdkcZX618O4HJbugNfOhin9F7zI7u8wQ9z4zo' +
                   'JmvRO82FrvEyejAeXWA7ejkSvf0B6AlHo/c+Er3lOPTSp6BHPRe97' +
                   'unogY9HLzoOvfSR6C0B9OR70fuR6O23o5ebAh3hNfRac6FrrEXvNC' +
                   'O6yXP0QvOiyyyht5kd3ecxehUHutJn9B4mdKsP9BI+dLF39AZWVfO' +
                   'qmlfVpAonVTivqkkVTqpwXlXzqppaybyq9tsv47Li7Q==');

    SetBitmapName(Self.MaskBMP, 'Minimap mask');
  end;
end;

function TMinimap._GetOrbValue(const orb: EMinimapOrb): Integer;
const
  IgnoreCols = [4938344, 0];
  Font = 'StatChars07';
var
  ATPA: array [0..1] of TPointArray;
  TextTPA: TPointArray;
  i: Integer;
begin
  for i := 0 to High(IgnoreCols) do
    FindColors(ATPA[i], IgnoreCols[i], OrbInfo[Ord(orb)].TextBox);

  TextTPA := ReturnPointsNotInTPA(MergeATPA(ATPA), OrbInfo[Ord(orb)].TextBox);
  Result := StrToIntDef(srl.GetTextFromTPA(TextTPA, 1, 3, 100, Font), 0);
end;

function TMinimap.GetPrayerLevel(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbPrayer);
end;

function TMinimap.GetHPLevel(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbHP);
end;

function TMinimap.GetHPPercent(): Byte;
var
  tb, b: TBox;
  TPA: TPointArray;
begin
  with Minimap.OrbInfo[ord(MMOrbHP)] do
    b := [Middle.X - Radius, Middle.Y - Radius, Middle.X + Radius, Middle.Y + Radius];
  FindColorsTolerance(TPA, 1250067, b, 20);
  tb := GetTPABounds(TPA);
  Result := 100 - Ceil((tb.y2 - tb.y1) / (b.y2 - b.y1) * 100);
end;

function TMinimap.GetRunEnergy(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbRun);
end;

function TMinimap.isRunEnabled(const Time: UInt32 = 0): Boolean;
const
  Col = 6806252;
  Tol = 15;
  MinCount = 10;
var
  b: TBox;
begin
  with (Self.OrbInfo[Ord(MMOrbRun)].Middle) do
    b := [X - 6, Y - 6, X + 6, Y + 6];

  if (Time = 0) then
    Result := (CountColorTolerance(Col, b, Tol) > MinCount)
  else
    Result := srl.WaitMinColorCount(Col, Tol, b, MinCount, Time);
end;

function TMinimap.ToggleRun(const Enable: Boolean): Boolean;
begin
  Result := True;

  with (Self.OrbInfo[Ord(MMOrbRun)]) do
  begin
    if (Enable) and (not Self.isRunEnabled()) then
    begin
      Mouse.Click(Middle, Radius, mouse_Left);
      Result := Self.isRunEnabled(Random(600, 1000));
    end
    else
    if (not Enable) and (Self.isRunEnabled()) then
    begin
      Mouse.Click(Middle, Radius, mouse_Left);
      Result := not Self.isRunEnabled(Random(250, 500));
    end;
  end;

  if (not Result) then
    srl.WriteFmt(Self.getName() + '.ToggleRun(): Failed to %s run',
                [BoolToStr(Enable, 'enable', 'disable')], TDebug.ERROR);
end;

function TMinimap.FindFlag(out p: TPoint): Boolean;
const
  PoleColor = 1127261;
  FlagColor = 255;
  LightPoleColor = 284358;
var
  TPA, TPAPoles: TPointArray;
  ATPA, ATPAColumns: T2DPointArray;
  i, j, Img: Integer;
begin
  p := [-1, -1];
  Img := BitmapFromClient(Self.getBounds());
  SetBitmapName(Img, 'Find flag bitmap');

  try
    if (not FindColorsBitmap(Img, TPA, PoleColor)) then
      Exit(False);

    with GetMufasaBitmap(Img) do
      for i := 0 to High(TPA) do
          if (GetPixel(TPA[i].x - 1, TPA[i].y) = FlagColor) or (GetPixel(TPA[i].x - 1, TPA[i].y) = LightPoleColor) and
             (GetPixel(TPA[i].X, TPA[i].y - 1) = PoleColor) or (GetPixel(TPA[i].x, TPA[i].y + 1) = PoleColor) then
                TPAPoles += TPA[i];

    if (Length(TPAPoles) = 0) then
      Exit(False);

    ATPAColumns := FindTPAColumns(TPAPoles);
    for i := 0 to High(ATPAColumns) do
    begin
      ATPA := SplitTPA(ATPAColumns[i], 1);

      for j := 0 to High(ATPA) do
        if (InRange(GetTPABounds(ATPA[j]).Height, 4, 20)) then
        begin
          Result := True;
          p := ATPA[j][0];

          while (p.y < (Self.getBounds().Height - 1)) and (FastGetPixel(Img, p.x, p.y) = PoleColor) do
            Inc(p.y);

          if (FastGetPixel(Img, p.x, p.y) <> PoleColor) then // Make sure we have the bottom of the pole
            Dec(p.y);
        end;
    end;
  finally
    FreeBitmap(Img);
  end;

  Inc(p.x, Self.GetBounds().X1);
  Inc(p.y, Self.GetBounds().Y1);
end;

function TMinimap.isFlagPresent(const WaitTime: UInt32 = 0): Boolean;
var
  TimeOut: UInt64;
  p: TPoint;
begin
  Result := False;
  TimeOut := GetTickCount64() + WaitTime;

  repeat
    if (Self.FindFlag(p)) then
      Exit(True);

    Wait(Random(50, 200));
  until (GetTickCount64() > TimeOut);
end;

procedure TMinimap.WaitFlag(const Dist: UInt32 = 0);
var
  TimeOut: UInt64;
  d, LastDist, SameDists: UInt32;
  p: TPoint;
begin
  TimeOut := GetTickCount64() + Random(23000, 25000);
  LastDist := 500;
  SameDists := 0;

  while (TimeOut > GetTickCount64()) and (Self.FindFlag(p)) do
  begin
    d := Distance(p, Self.getMiddle());
    if (d <= Dist) then
      Exit();

    if (d = LastDist) then
      Inc(SameDists)
    else
      SameDists := 0;

    if (SameDists >= 60) then
    begin
      srl.Writeln(Self.getName() + '.WaitFlag(): Distance between flag hasn''t changed in 60 loops, exiting.. ', TDebug.WARNING);
      Exit();
    end;

    LastDist := d;
    Wait(Random(50, 100));
  end;
end;

(*
Minimap.WaitFlagEx
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TMinimap.WaitFlagEx(MaxDist: Byte = 5): Boolean;

Extra WaitFlag method that Waits for the flag to disapear but will return if the
position we walked to is where the flag was first clicked.

  - Useful to know if you were able to walk into a room or not (blocked entrance, etc).
  - MaxDist param is default, but is the max distance the flag can move else we result False.

Example:

.. code-block:: pascal

    if (Minimap.WaitFlagEx()) then
      srl.Writeln('We have walked to the position succesfully')
    else
      srl.Writeln('We have finished walking, but the flag moved alot so we didnt hit our target pos');
*)
function TMinimap.WaitFlagEx(MaxDist: Byte = 5): Boolean;
var
  OldPt, NewPt: TPoint;
  t: UInt64;
  Found: Boolean;
begin
  Result := True;

  t := GetTickCount64() + Random(2500, 3500);
  while (not (Found := Self.FindFlag(OldPt))) and (t > GetTickCount64()) do
    Wait(Random(25, 50));

  if (not Found) then
    Exit(False);

  t := GetTickCount64() + Random(22000, 24000);
  while (FindFlag(NewPt)) and (t > GetTickCount64()) do
  begin
    if (Distance(OldPt, NewPt) > MaxDist) then
    begin
      Self.WaitFlag();
      Exit(False);
    end;

    OldPt := NewPt;
    Wait(Random(25, 50));
  end;
end;

function TMinimap.GetCompassAngle(AsDegrees:Boolean=True): Extended;
var
  north,south: TPoint;
  M:TPoint := Self.CompassInfo.Middle;
  TPA:TPointArray;
begin
  if not FindColorsTolerance(TPA, 1911089, Self.CompassInfo.Bounds, 20) then
     Exit(srl.Writeln('Failed to find the `N` in the compass', 0.00, '', TDebug.WARNING));

  FilterPointsDist(TPA, 8,15, M.x,M.y);
  north := MiddleTPA(SplitTPA(TPA,3)[0]);
  south := RotatePoint(north,PI, M.x,M.y);
  if not FindColorsTolerance(TPA, 920735, Self.CompassInfo.Bounds, 20) then
    Exit(srl.Writeln('Failed to find red compass dots color', 0.00, '', TDebug.WARNING));
  
  FilterPointsDist(TPA, 0,6, south.x,south.y);
  SortTPAFrom(TPA, M);
  if (Length(TPA) > 0) then
    Result := FixRad(ArcTan2(TPA[high(tpa)].y-M.y, TPA[high(tpa)].x-M.x) - (PI/2))
  else
    srl.Writeln('Failed to find compass dial color', TDebug.WARNING);

  if AsDegrees then
    Result := Degrees(Result);
end;

function TMinimap.SetCompassAngle(Angle: Extended; Tolerance: Integer = 3): Boolean;

  function Compass_Distance(Angle, Target: Extended): Extended;
  begin
    if (Abs(Target - Angle) < 180) then
    begin
      Result := Target - Angle;
      Exit;
    end;

    if (Target > Angle) then
      Result := Target - Angle - 360
    else
      Result := Target - Angle + 360;
  end;

  procedure Key(Left: Boolean);
  begin
    case (Left) of
      True:
        begin
          KeyUp(VK_RIGHT);
          KeyDown(VK_LEFT);
        end;
      False:
        begin
          KeyUp(VK_LEFT);
          KeyDown(VK_RIGHT);
        end;
    end;
  end;

var
  TimeOut: UInt64;
  CurrentAngle, AngleDistance: Extended;
  Left: Boolean;
begin
  Angle := FixD(Angle);
  CurrentAngle := Self.GetCompassAngle();
  if (CurrentAngle = Angle) then
    Exit(True);

  TimeOut := GetTickCount64() + Random(9000, 11000);
  while (Abs(Compass_Distance(CurrentAngle, Angle)) > Tolerance) and (GetTickCount64() < TimeOut) do
  begin
    AngleDistance := CurrentAngle - Angle;
    Left := ((AngleDistance > 0) and (Abs(AngleDistance) <= 180)) or ((AngleDistance < 0) and (Abs(AngleDistance) > 180));
    Key(Left);

    CurrentAngle := Self.GetCompassAngle();
    Result := Abs(Compass_Distance(CurrentAngle, Angle)) <= Tolerance;
    if (Result) then
      Break();

    Wait(Random(15, 30));
  end;

  if (GetTickCount64() >= TimeOut) then
    srl.Writeln('TRSMinimap.SetCompassAngle(): Setting angle timed out', TDebug.WARNING);

  KeyUp(VK_LEFT);
  KeyUp(VK_RIGHT);

  Wait(Random(270, 420));
end;

function TMinimap.GetDots(DotType: EMinimapDotType; SortFromPlayer: Boolean = True): TPointArray;
const { aligned with EMinimapDotType }
  DOT_COL_DIFF = [1907997, 23, 4369];
var
  img, i: Integer;
  TPA: TPointArray;
begin
  img := BitmapFromClient(Self.GetBounds());

  try
    if (not FindColorsBitmap(img, TPA, 65536)) then
      Exit;

    for i := 0 to High(TPA) do
      if (TPA[i].X > 0) and (TPA[i].Y > 0) then
        if (FastGetPixel(img, TPA[i].X-1, TPA[i].Y-1) -
            FastGetPixel(img, TPA[i].X, TPA[i].Y-1) = DOT_COL_DIFF[Ord(DotType)]) then
          Result += Point(TPA[i].X, TPA[i].Y - 2);

    if (Length(Result) > 0) then
    begin
      OffsetTPA(Result, Point(Self.GetBounds().X1, Self.GetBounds().Y1));
      if (SortFromPlayer) then
        SortTPAFrom(Result, Self.GetMiddle());
    end;
  finally
    FreeBitmap(img);
  end;
end;

function TMinimap.FindDots(DotType: EMinimapDotType; MinCount: UInt32 = 1): Boolean;
begin
  Result := Length(Self.GetDots(DotType, False)) >= MinCount;
end;

function TMinimap.isPointOn(pt: TPoint): Boolean;
var
  p: TPoint;
begin
  Result := False;

  if (PointInBox(pt, Self.getBounds())) then
  begin
    p := [pt.X - Self.GetBounds().X1, pt.Y - Self.GetBounds().Y1];
    if (GetMufasaBitmap(Self.MaskBMP).PointInBitmap(p.x, p.y)) then
      Result := FastGetPixel(Self.MaskBMP, p.x, p.y) <> $FFFFFF;
  end;
end;

procedure TMinimap.FilterPoints(var TPA: TPointArray);
var
  FilterTPA: TPointArray;
begin
  if (FindColorsBitmap(Self.MaskBMP, FilterTPA, clBlack)) then
    TPA := ClearTPAFromTPA(TPA, FilterTPA);
end;

function TMinimap.FindDTMs(const DTM: Integer; out Matches: TPointArray; Step: Extended = 1.00; Range: UInt32 = 25): Boolean;

  function GetSearchAngles(TheAngle, TheRange: Extended): T2DExtendedArray;
  var
    StartA, EndA: Extended;
  begin
    StartA := (TheAngle - TheRange);
    EndA := (TheAngle + TheRange);

    if (StartA < 0.00) then
    begin
      Result += TExtendedArray([360 + StartA, 360]);
      Result += TExtendedArray([0, 0 + EndA]);
    end else if (EndA > 360.0) then
    begin
      Result += TExtendedArray([StartA, 360]);
      Result += TExtendedArray([0, 0 + Abs(EndA - 360)]);
    end else
      Result += TExtendedArray([StartA, EndA]);
  end;

var
  SearchAngles, FoundAngles, tmp: T2DExtendedArray;
  i: integer;
  TPA: TPointArray;
begin
  SetLength(Matches, 0);
  SearchAngles := GetSearchAngles(Self.GetCompassAngle(), Range);

  for i := 0 to High(SearchAngles) do
    with Self.GetBounds() do
      if (FindDTMsRotatedSE(DTM, TPA, X1, Y1, X2, Y2, SearchAngles[i][0], SearchAngles[i][1], Step, tmp)) then
      begin
        Insert(tmp, FoundAngles, Length(FoundAngles));
        AppendTPA(Matches, TPA);
      end;

  Self.FilterPoints(Matches);
  Result := Length(Matches) > 0;
end;


begin
  Minimap.__Setup();
end;
