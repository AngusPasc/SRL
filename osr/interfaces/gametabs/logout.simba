(*
Logout
=======
The file holds functions and procedures that are in the logout-tab.
*)

(*
type TRSLogout
~~~~~~~~~~~~~~~
The type that holds functions and properties of the Runescape logout-tab.
*)
type
  ELogoutSubtab = (lsTabNone, lsTabLogout, lsTabWorldSelect);

  TRSLogout = record(TInterfaceBase)
    FCurrentTab: ELogoutSubtab;
    btnOpenWS: TBox;
    btnLogout: TBox;
    btnLogoutWS: TBox; //not used yet
    btnExitWS: TBox;
  end;

{==| Table of Contents |=======================
 procedure TRSLogout.__setup();
 function TRSLogout.Open(): Boolean;
 function TRSLogout.IsOpen(): Boolean;
 function TRSLogout.ClickLogout(attempts:Int32=3; tryTime:Int32=20000): Boolean;
}

(*
var Logout
~~~~~~~~~~~
Variable that stores functions and properties of the Runescape logout interface.
*)
var 
  Logout: TRSLogout;
  
{$IFNDEF CODEINSIGHT}
procedure TRSLogout.__setup();
var i:Int32;
begin
  with Self do
  begin
    FCurrentTab := lsTabLogout;
  
    FName := 'Logout';
    FStatic := True;
    FBounds := [550,206,733,464];
    
    btnOpenWS  := [575,346,708,375];
    btnLogout  := [575,405,708,431];
    btnLogoutWS:= [0,0,0,0];
    btnExitWS  := [716, 207, 734, 225];
  end;
end;
{$ENDIF}


function TRSLogout.UpdateSubtab(): ELogoutSubtab;
begin
  self.FCurrentTab := lsTabLogout;
  if self.IsWorldSelectOpen(Random(450,900)) then
    self.FCurrentTab := lsTabWorldSelect;
  Result := self.FCurrentTab;
end;


(*
Logout.Open
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.Open(): Boolean;

Opens the interface
*)
function TRSLogout.Open(): Boolean;
begin
  Result := Gametabs.Open(tabLogout);
end;

(*
Logout.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.IsOpen(Tab:ELogoutSubtab=lsTabNone; maxWait:Int32=0): Boolean;

Checks if the interface is already open. Can also be used to check if a specific "subtab" is open.
*)
function TRSLogout.IsOpen(Tab:ELogoutSubtab=lsTabNone; maxWait:Int32=0): Boolean;
var 
  t:Int64;
begin
  Result := Gametabs.IsOpen(tabLogout, maxWait);
  if (Result) and (Tab <> lsTabNone) then
    Result := Self.UpdateSubtab() = tab;
end;

(*
Logout.IsWorldSelectOpen
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.IsWorldSelectOpen(): Boolean;

Checks if the sub-interface: "world switcher" is open.
*)
function TRSLogout.IsWorldSelectOpen(WaitTime:Int32=0): Boolean;
var
  t: UInt64;
  p: TPoint;
begin
  if (WaitTime = 0) then
    Exit(srl.FindText(p, 'Current world', 'UpChars07_s', Self.GetBounds()));

  t := GetTickCount64() + WaitTime;
  repeat
    if (srl.FindText(p, 'Current world', 'UpChars07_s', Self.GetBounds())) then
    begin
      Self.FCurrentTab := lsTabWorldSelect;
      Exit(True);
    end 
    else
      Wait(Random(50, 100));
  until (GetTickCount64() > t);

  Result := False;
end;

(*
Logout.OpenWorldSelect
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.OpenWorldSelect(): Boolean;

Opens the sub-interface (World Switcher)
*)
function TRSLogout.OpenWorldSelect(): Boolean;
var 
  t:UInt64;
begin
  if not(self.Open()) then
    Exit(False);
  
  Result := self.IsOpen(lsTabWorldSelect);
  if not(Result) then
  begin
    mouse.Click(Self.BtnOpenWS, mouse_left);
    t := GetTickCount64() + Random(500,1000);
    repeat
      if (self.UpdateSubTab() = lsTabWorldSelect) then 
        Exit(True)
      else
        Wait(75);
    until (GetTickCount64() > t);
  end;
end;

(*
Logout.CloseWorldSelect
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.CloseWorldSelect(): Boolean;

Closes/Switches from the `world select` subtab, does nothing if it's not open.
*)
procedure TRSLogout.CloseWorldSelect();
var
  p: TPoint;
  t:UInt64;
begin
  if self.IsOpen(lsTabWorldselect) then
  begin
    Mouse.Click(BtnExitWS, mouse_Left);
    t := GetTickCount64() + Random(400,900);
    repeat
      if srl.FindText(p, 'Switcher', 'UpChars07_s', Self.FBounds) then
        break;
      Wait(75);
    until (t >= GetTickCount64());
  end;
end;

(*
Logout.ClickLogout
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;

Clicks the logout button, by default retires 3 times over 20 seconds.
*)
function TRSLogout.ClickLogout(attemts:Int32=3; tryTime:Int32=20000): Boolean;
var 
  state:boolean;
  t,seed:UInt64;
begin
  if not(self.Open()) then Exit();
  self.CloseWorldSelect();
  
  seed := 3153;
  Inc(tryTime, attemts * seed div 2);
  for 1 to attemts do
  begin
    mouse.click(Self.BtnLogout, mouse_left);
    t := GetTickCount64() + (tryTime div attemts);
    repeat
      if (CountColorTolerance(1777019, Self.BtnLogout, 30) < 100) then
        Exit(True)
      else
        Wait(25);
    until GetTickCount64() > t;
    srl.NormalWait(0,seed);
  end;
end;

(*

*)
function TRSLogout.ClickWorld(World: Integer): Boolean;

  // 302 to 2
  function ShortWorld(wo: Integer): Integer;
  var
    s: String;
  begin
    s := IntToStr(wo);
    if (Length(s) = 3) then
    begin
      s := Copy(s, 2, 2);
      if (s[1] = '0') then
        s := s[Length(s)];
    end;
    Exit(StrToInt(s));
  end;

const
  TEXT_COLORS = [14737632, 61680];
var
  t: UInt64;
  i, j: Integer;
  Down: Boolean = True;
  WorldBox: TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  b: TBox;
  wo: String;
begin
  Result := False;
  wo := ToString(ShortWorld(world));
  WorldBox := Box(565, 229, 585, 431);
  t := GetTickCount64() + Random(8000, 10000);

  while (t > GetTickCount64()) do
  begin
    if (FindColors(TPA, 0, WorldBox)) then
    begin
      ATPA := ClusterTPAEx(TPA, 20, 2); // Get bounds of each world number
      for i := 0 to High(ATPA) do
      begin
        TBox(b := GetTPABounds(ATPA[i])).Expand(2);

        for j := 0 to High(TEXT_COLORS) do
          if (GetTextAtEx(b, 0, 3, 0, TEXT_COLORS[j], 0, 'SmallChars07') = wo) then
          begin
            b.X1 -= 15;
            b.X2 += 130;
            Mouse.Click(b, mouse_Left);
            Exit(True);
          end;
      end;
    end;
    Mouse.Scroll(Box(660, 230, 727, 430), Random(2, 5), Down);
    
    //if the scrollbar is at the bottom then scroll up
    if ((GetColor(730, 416) = 65536) and Down) or ((GetColor(730, 245) = 65536) and not Down) then 
      Down := not Down; 
  end;
end;

(*
Logout.SwitchToWorld
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

  function TRSLogout.SwitchToWorld(World: Integer): Boolean;

Jumps to the given world.
*)
function TRSLogout.SwitchToWorld(World: Integer): Boolean;
begin
  if (not Self.OpenWorldSelect()) and (not ClickWorld(World)) then
    Exit(False);

  Result := True;
  Chatbox.ClickOption(['Yes.'], Random(2000, 2500));
  Chatbox.PleaseWait();
  Mainscreen.WaitWhileLoading();
  srl.NormalWait(150,500);
end;


begin
  logout.__Setup();
end;
