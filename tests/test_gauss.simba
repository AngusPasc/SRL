program gauss_test;

{$i srl/shared/gauss.simba}

type
  TMode = (g_circle, g_box, g_gauss);

const
  Tries = 15000;
  Mode = g_Gauss;
  animated = False;

var
  img: Integer;

procedure doCircle();
const
  mid: TPoint = [250, 250];
  rad = 200;
var
  tpa: TPointArray;
  p: TPoint;
begin
  tpa := TPAFromCircle(mid.x, mid.y, rad);
  DrawTPABitmap(img, tpa, 255);

  for 0 to Tries do
  begin
    if (animated) then
    begin
      DrawBitmapDebugImg(img);
      Wait(1);
    end;

    DrawTPABitmap(img, [gaussPoint(Mid, rad)], 643836);
  end;
end;

procedure doBox();
const
  box: TBox = [100, 100, 400, 400];
var
  tpa: TPointArray;
  p: TPoint;
begin
  DrawTPABitmap(img, TPABorder(TPAFromBox(box)), 255);

  for 0 to Tries do
  begin
    if (animated) then
    begin
      DrawBitmapDebugImg(img);
      Wait(1);
    end;

    DrawTPABitmap(img, [gaussPoint(Box)], 643836);
  end;
end;

procedure doGauss();

  function AvgExtended(const tE: TExtendedArray): Extended;
  var
    i, h: Integer;
  begin
    Result := 0;
    h := High(tE);
    if h < 0 then Exit;
    for i := 0 to h do
      Result := (Result + tE[i]);
    Result := Result / (H+1);
  end;

var
  a: array[0..Tries] of Extended;
  i: Integer;
begin
  for i := 0 to High(a) do
    a[i] := TruncedGauss;

  Writeln(AvgExtended(a));
end;

begin
  img := CreateBitmap(500, 500);
  ShowBitmap(img);

  case (Mode) of
    g_circle: doCircle();
    g_box: doBox();
    g_gauss: doGauss();
  end;

  ShowBitmap(img);
  FreeBitmap(img);
end.
