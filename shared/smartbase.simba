{$loadlib libsmartremote}

type
  TSmartBase = record
    Parameters: record Root, Param, UserAgent, InitSeq: String; Plugins: TStringArray; end;
    Name, JavaPath: String;
    Width, Height: UInt16;
    Image: TMufasaBitmap;
    Target: PtrUInt;
    PID, InitAttempts: Integer;
    ForceSpawn, EnableDebug, _isDrawingSetup, ShowConsole, FindJavaPath: Boolean;
    GetParams: function(): Boolean of object;
    Hook_After_Reload: procedure();
  end;

function TSmartBase.getHWND(): PtrUInt;
var
  a: TSysProcArr := Client.getIOManager().GetProcesses();
  c: TChildWindowArr;
  i, j: Integer;
begin
  Result := 0;

  for i := 0 to High(a) do
    if (a[i].PID = Self.PID) then
    begin
      c := Client.getIOManager().GetChildWindows(a[i].Handle);

      for j := 0 to High(c) do
        if (c[j].Width >= Self.Width) and (c[j].Height >= Self.Height) then
          Exit(c[j].Handle);
    end;

  srl.Writeln(Self.Name + 'getHWND(): Failed to find hwnd', TDebug.ERROR);
end;

procedure TSmartBase.setDebug(const Enable: Boolean);
begin
  SmartSetDebug(Self.Target, Enable);

  if (Self.EnableDebug) and (Enable) and (not Self._isDrawingSetup) then
  begin
    Self.Image.Init(Client.getMBitmaps());

    with (Self.Image) do
    begin
      setName(Format('Smart[%d] Image', [Self.PID]));
      setSize(Width, Height);
      setPersistentMemory(SmartDebugArray(Self.Target), Self.Width, Self.Height);
      DrawClear($000000);
    end;

    Self._isDrawingSetup := True;
  end;
end;

procedure TSmartBase.setEnabled(const Enable: Boolean);
begin
  SmartSetEnabled(Self.Target, Enable);
end;

function TSmartBase.getEnabled(): Boolean;
begin
  Result := SmartEnabled(Self.Target);
end;

function TSmartBase.LocateJavaPath(var Res: String; x86: Boolean; Dir: char = 'A'; Recursive: Boolean = False): Boolean;

  function GetDirectoryName(Directory, Path: String): String;
  var
    I: Integer;
    Directories: TStringArray;
  begin
    Directories := GetDirectories(Path);
    for I := 0 To High(Directories) Do
      if ExecRegExpr(Directory, Directories[I]) then
      begin
        Result := Directories[I];
        Exit;
      end;
  end;

  function GetDirectoryNames(Directory, Path: String): TStringArray;
  var
    I: Integer;
    Directories: TStringArray;
  begin
    Directories := GetDirectories(Path);
    for I := 0 To High(Directories) Do
      if ExecRegExpr(Directory, Directories[I]) then
        Result := Result + Directories[I];
  end;

  function FindDirectory(Directory, Path: String): Boolean;
  begin
    Result := Length(GetDirectoryName(Directory, Path)) > 0;
  end;

var
  Drive: String;
  CurrentPath, c: String;
  Drives: TStringArray;
  i: Integer;
begin
  Result := False;
  Res := '';

  if (Recursive) then
  begin
    Drive := Dir + ':/';
  end else
    Drive := Copy(PluginPath, 0, 3);

  if (x86) then
    CurrentPath := Drive + 'Program Files (x86)\'
  else
   CurrentPath := Drive + 'Program Files\';

  if (FindDirectory('Java|java', CurrentPath + '\')) then
  begin
    CurrentPath := CurrentPath + 'Java\';
  end else
    if (Dir <> 'Z') then
      Result := Self.LocateJavaPath(Res, x86, chr(ord(Dir) + 1), True)

  if (Result) then
    Exit();

  Drives := GetDirectoryNames('jre', CurrentPath);

  if (Length(Drives) > 0) then
  begin
    c := CurrentPath;
    for i := 0 to High(Drives) do
      begin
        CurrentPath := c;
        if (Self.ShowConsole) then
          CurrentPath := CurrentPath + Drives[i] + '\bin\java.exe'
        else
          CurrentPath := CurrentPath + Drives[i] + '\bin\javaw.exe';

        Result := FileExists(CurrentPath);
        if (Result) then
          Break;
      end;
  end else begin
    Drives := GetDirectoryNames('jdk', CurrentPath);
    c := CurrentPath;

    for i := 0 to High(Drives) do
    begin
      CurrentPath := c;
      if (Self.ShowConsole) then
        CurrentPath := CurrentPath + Drives[i] + '\bin\java.exe'
      else
        CurrentPath := CurrentPath + Drives[i] + '\bin\javaw.exe';

      Result := FileExists(CurrentPath);
      if (Result) then
        Break;
    end;
  end;

  Result := FileExists(CurrentPath);
  Res := CurrentPath;
end;

function TSmartBase.SetAsTarget(): Boolean;
var
  idx: Integer = -1;
begin
  try
    idx := SetEIOSTarget('libsmartremote', intToStr(Self.PID));
  except
    srl.WriteFmt('Failed to set libsmartremote(%d) as our target', [Self.PID]);
    idx := -1;
  finally
    Result := (idx > -1);
  end;
end;

function TSmartBase.CreateClient(): Boolean;
begin
  Result := True;
  srl.Writeln(Self.Name + '.CreateClient()', TDebug.HEADER);

  if (@Self.GetParams <> nil) then
    if (not Self.GetParams()) then
      Exit(srl.Writeln('Failed to create client, Could not find spawn parameters', False, Self.Name + '.CreateClient(): Result = False', TDebug.ERROR));

  with (Self.Parameters) do
  begin
    if (JavaPath = '') then
    begin
      JavaPath := 'java';
      if (not Self.ShowConsole) then
        JavaPath += 'w';
    end;

    {$IFDEF WINDOWS}
    if (Pos('.exe', JavaPath) = 0) then
      JavaPath += '.exe'
    {$ENDIF};

    srl.Writeln('Java path: ' + JavaPath);
    srl.Writeln('Params: ' + Root + Param);
    srl.Writeln('Plugins: ' + toString(Plugins));

    Self.Target := SmartSpawnClient(JavaPath, StringReplace(PluginPath, '\', '/', [rfReplaceAll]),
                                    Root, Param, Width, Height, InitSeq, UserAgent, '', Implode(',', Plugins));
  end;

  if (Self.Target = 0) then
    Exit(srl.Writeln('Failed to create client, invaild target, Make sure you have 32-bit java', False, Self.Name + '.CreateClient(): Result = False', TDebug.ERROR));

  Self.PID := SmartGetClientPID(Self.Target);
  if (not Self.SetAsTarget()) then
  begin
    SmartFreeClient(Self.Target);
    Exit(srl.Writeln('Failed to create client, Failed to set as target', False, Self.Name + '.CreateClient(): Result = False', TDebug.ERROR));
  end;

  srl.Writeln('Succesfully created a SMART client, PID = ' + toString(Self.PID), TDebug.SUB);
  srl.Writeln(Self.Name + '.CreateClient(): Result = True', TDebug.FOOTER);
end;

function TSmartBase.PairToExisting(): Boolean;

  function GetPIDs(): TIntegerArray;
  var
    i: Integer;
  begin
    for i := 0 to SmartGetClients(True) do
      Result += SmartGetAvailablePID(i);
  end;

var
  Pids: TIntegerArray;
  i: Integer;
  tmp: PtrUInt;
begin
  Result := False;

  Pids := GetPIDs();
  if (Length(Pids) = 0) then
    Exit();

  srl.Writeln(Self.Name + '.PairToExisting()', TDebug.HEADER);
  srl.WriteFmt('Free clients: %s', [toString(Pids)]);

  for i := 0 to High(Pids) do
  begin
    if (Pids[i] = 0) then
      Continue();

    tmp := 0;
    tmp := SmartPairClient(Pids[i]);

    if (tmp > 0) then
    begin
      Self.PID := Pids[i];

      if (Self.SetAsTarget()) then
      begin
        Self.Target := tmp;
        Exit(srl.WriteFmtEx('Succesfully paired to existing client; SMART[%d]', [Self.PID],
                            True, Self.Name + '.PairToExisting(): Result = True'));
      end;
    end else begin
      srl.WriteFmt('Failed to pair to SMART[%d]', [Pids[i]], TDebug.ERROR);
      SmartFreeClient(tmp);
    end;
  end;

  srl.Writeln(Self.Name + '.PairToExisting(): Result = False', TDebug.FOOTER);
end;

function TSmartBase.Reload(): Boolean;
begin
  if (Assigned(@Self.Hook_After_Reload)) then
    Self.Hook_After_Reload();
end;

function TSmartBase.Init(): Boolean;
var
  i: Integer = 0;
begin
  Result := False;
  Self.Name := GetGlobalName(@Self);

  srl.Writeln(Self.Name + '.Init()', TDebug.HEADER);

  if (Self.InitAttempts = 0) then
    Self.InitAttempts := 1;

  while (not Result) do
  begin
    Inc(i);

    if (i > Self.InitAttempts) then
      Exit(srl.WriteFmtEx('Reached max(%d) init attempts', [Self.InitAttempts], False,
                          Self.Name + '.Init(): Result = False', TDebug.ERROR));

    if (not Self.ForceSpawn) then
    begin
      if (not Self.PairToExisting()) then
        if (not Self.CreateClient()) then
          Continue();
    end else
      if (not Self.CreateClient()) then
        Continue();

    Result := True;
  end;

  if (Self.getEnabled() = False) then
    Self.setEnabled(True);

  if (Self.EnableDebug) then
    Self.setDebug(True);

  srl.Writeln(Self.Name + '.Init(): Result = True', TDebug.FOOTER);
end;

procedure TSmartBase.Free();
begin
  srl.WriteFmt('Freeing SMART[%d]', [Self.PID]);

  if (Self._isDrawingSetup) then
  begin
    Self.Image.ResetPersistentMemory();
    Self.Image.Free();
    Self._isDrawingSetup := False;
  end;

  if (Self.Target > 0) then
    SmartFreeClient(Self.Target);
end;
