const
  __gauss_norm_0 = 0.029899776;
  __gauss_norm_1 = 0.008355968;
  __gauss_norm_2 = 0.076542912;
  __gauss_norm_3 = 0.252408784;
  __gauss_norm_4 = 3.949846138;

var
  __gaussPoint: Extended = 0.4;
  __gaussRange: Extended = 0.3;


function _gaussPoly(r, rsqr: Extended): Extended;
begin
  Result := __gauss_norm_0 * rsqr + __gauss_norm_1;
  Result := Result * rsqr + __gauss_norm_2;
  Result := Result * rsqr + __gauss_norm_3;
  Result := Result * rsqr + __gauss_norm_4;
  Result := Result * r;
end;

{$IFNDEF CODEINSIGHT}
function __gaussRand(): Extended;
begin
  Result := sqrt(-2.0*ln(RandomE()))*cos(2.0*PI*RandomE());
end;
{$ENDIF}

function GaussRand(mean, dev: Extended): Extended;
begin
  result := mean + dev * __gaussRand();
end;


(*
TruncedGauss
~~~~~

.. code-block:: pascal

    function TruncedGauss(Lo:Double=0; Hi:Double=1): Double;

First it generates a gaussian number, then truncates the number (gaussian doesn't live in a finite interval), 
and then maps the number within given range [lo..hi] weighted towards `lo`

.. note::

    - by: slacky

*)
function TruncedGauss(lo:Double=0; hi:Double=1): Double;
const LIMIT = 5.5;
begin
  Result := Abs(Sqrt(-2 * Ln(Random())) * Cos(2 * PI * Random()));
  Result := MinE(Result, LIMIT);
  Result := Result / LIMIT * (Hi-Lo) + Lo;
end;

(*
gauss
~~~~~

.. code-block:: pascal

    function Gauss(): Extended;

Calculates a standard normal value (N(0, 1)). By definition, 68.2% of points
will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::

    - by: Nava2

*)
function Gauss(): Extended;
var
  r: Extended;
  i: Integer;
begin
  r := 0.0;
  for i := 0 to 11 do
    r := r + (random(High(Integer))*1.0)/High(Integer);

  r := (r-6.0)/4.0 ;
  result := _gaussPoly(r, r*r);
end;


function GaussRangeInt(minI, maxI: Integer): Integer;
begin
  case Random(0,1) of
    0: Result := Round((maxI+minI)/2.0 + TruncedGauss(0, (maxI-minI)/2));
    1: Result := Round((maxI+minI)/2.0 - TruncedGauss(0, (maxI-minI)/2));
  end;
end;

function GaussRangeExt(minI, maxI: Extended): Extended;
begin
  case Random(0,1) of
    0: Result := (maxI+minI)/2.0 + TruncedGauss(0, (maxI-minI)/2);
    1: Result := (maxI+minI)/2.0 - TruncedGauss(0, (maxI-minI)/2);
  end;
end;


function GaussPoint(center: TPoint; maxRad: Int32): TPoint;
begin
  Result.X := GaussRangeInt(center.x-maxRad, center.x+maxRad);
  Result.Y := GaussRangeInt(center.y-maxRad, center.y+maxRad);
end;

function GaussPoint(const Box: TBox): TPoint; overload;
begin
  Result.X := GaussRangeInt(Box.x1, Box.x2);
  Result.Y := GaussRangeInt(Box.y1, Box.y2);
end;


function GaussRandom(maxExt: Integer): Integer;
begin
  Result := gaussRangeInt(0, maxExt-1);
end;
