procedure TIntegerArray.Append(const Value: Integer);
var top:Int32;
begin
  top := Length(Self);
  SetLength(self, top+1);
  Self[top] := Value;
end;

procedure TIntegerArray.Insert(const Value, Index: Integer);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= Index) then
  begin
    Self.Append(Value);
    Exit();
  end;

  SetLength(Self, l + 1);
  MemMove(Self[Index], self[Index + 1], (L-Index) * SizeOf(Integer));
  Self[Index] := Value;
end;

procedure TIntegerArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

function TIntegerArray.Len(): Integer;
begin
  Result := Length(Self);
end;

procedure TIntegerArray.Remove(const Value: Integer; const All: Boolean = False);
var
  Arr: TIntegerArray;
  i: Integer;
begin
  if (All) then
    Arr := Self.FindAll(Value)
  else begin
    SetLength(Arr, 1);
    Arr[0] := Self.Find(Value);
  end;

  for i := 0 to High(Arr) do
    Self.Del(Arr[i]);
end;

function TIntegerArray.Pop(): Integer;
var
  h: Integer;
begin
  h := High(Self);
  if h >= 0 then
  begin
    Result := Self[h];
    SetLength(Self, h);
  end else
    RaiseException(erOutOfRange, 'Array is empty');
end;

procedure TIntegerArray.Extend(Arr:TIntegerArray);
var L:Int32;
begin
  if Length(arr) > 0 then
  begin
    L := Length(Self);
    SetLength(Self, Length(Arr) + L);
    MemMove(Arr[0],Self[L],Length(Arr)*SizeOf(Integer));
  end;
end; 

function TIntegerArray.Find(const Value: Integer): Integer;
begin
  for Result := 0 to High(Self) do
    if (Value = Self[Result]) then
      Exit;

  Result := -1;
end;

function TIntegerArray.FindAll(const Value: Integer): TIntegerArray;
var
  i,top: UInt32;
begin
  for i:=0 to High(Self) do
    if (Self[i] = Value) then
    begin
      SetLength(Result, top+1);
      Result[Inc(top)-1] := i;
    end;
end

function TIntegerArray.Reversed(): TIntegerArray;
var
  lo:PtrUInt;
  p,r:^Integer;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure TIntegerArray.Reverse();
var
  tmp:Integer;
  lo,hi:^Integer;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function TIntegerArray.Combine(other: TIntegerArray): TIntegerArray;
begin
  SetLength(Result, Length(Self) + Length(other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(other) > 0 then
    MemMove(other[0], result[Length(Self)], Length(other)*SizeOf(other[0]));
end;   
