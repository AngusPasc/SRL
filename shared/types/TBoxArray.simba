procedure TBoxArray.Append(const Value: TBox);
begin
  Self += Value;
end;

procedure TBoxArray.Insert(const Value: TBox; Index: Integer);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= Index) then
  begin
    Self.Append(Value);
    Exit();
  end;

  SetLength(Self, l + 1);
  MemMove(Self[Index], self[Index + 1], (L - Index) * SizeOf(Integer));
  Self[Index] := Value;
end;

procedure TBoxArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

function TBoxArray.Len(): Integer;
begin
  Result := Length(Self);
end;

procedure TBoxArray.Remove(const Value: TBox; const All: Boolean = False);
var
  Arr: TIntegerArray;
  i: Integer;
begin
  if (All) then
    Arr := Self.FindAll(Value)
  else begin
    SetLength(Arr, 1);
    Arr[0] := Self.Find(Value);
  end;

  for i := 0 to High(Arr) do
    Self.Del(Arr[i]);
end;

function TBoxArray.Pop(): TBox;
var
  h: Integer;
begin
  h := High(Self);
  Result := Self[h];
  SetLength(Self, h);
end;

procedure TBoxArray.Extend(Arr:TBoxArray);
var L:Int32;
begin
  L := Length(Self);
  SetLength(Self, Length(Arr) + L);
  MemMove(Arr[0],Self[L],Length(Arr)*SizeOf(TBox));
end; 

function TBoxArray.Find(const Value: TBox): Integer;
begin
  for Result := 0 to High(Self) do
    if (Self[Result].X1 = Value.X1) and (Self[Result].Y1 = Value.Y1) and
       (Self[Result].X2 = Value.X2) and (Self[Result].Y2 = Value.Y2) then
         Exit;

  Result := -1;
end;

function TBoxArray.FindAll(const Value: TBox): TIntegerArray;
var
  i: UInt32;
begin
  for i := 0 to High(Self) do
    if (Self[i].X1 = Value.X1) and (Self[i].Y1 = Value.Y1) and
       (Self[i].X2 = Value.X2) and (Self[i].Y2 = Value.Y2) then
         Result += i;
end

function TBoxArray.Reversed(): TBoxArray;
var
  lo:PtrUInt;
  p,r:^TBox;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure TBoxArray.Reverse();
var
  tmp:TBox;
  lo,hi:^TBox;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function TBoxArray.Combine(const Arr2: TBoxArray): TBoxArray;
var
  i, h, j: Integer;
begin
  if (Length(Arr2) = 0) then
    Exit(Self);

  Result := Self;
  SetLength(Result, Length(Self) + Length(Arr2));

  j := 0;
  for i := Length(Self) to High(Arr2) + Length(Self) do
  begin
    Result[i] := Arr2[j];
    Inc(j);
  end;
end;
