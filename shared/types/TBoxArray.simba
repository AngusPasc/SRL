procedure TBoxArray.Append(const Value: TBox);
var top:Int32;
begin
  top := Length(Self);
  SetLength(self, top+1);
  Self[top] := Value;
end;

procedure TBoxArray.Insert(const Value: TBox; Index: Integer);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= Index) then
  begin
    Self.Append(Value);
    Exit();
  end;

  SetLength(Self, l + 1);
  MemMove(Self[Index], self[Index + 1], (L - Index) * SizeOf(Integer));
  Self[Index] := Value;
end;

procedure TBoxArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

function TBoxArray.Len(): Integer;
begin
  Result := Length(Self);
end;

procedure TBoxArray.Remove(const Value: TBox; const All: Boolean = False);
var
  Arr: TIntegerArray;
  i: Integer;
begin
  if (All) then
    Arr := Self.FindAll(Value)
  else begin
    SetLength(Arr, 1);
    Arr[0] := Self.Find(Value);
  end;

  for i := 0 to High(Arr) do
    Self.Del(Arr[i]);
end;

function TBoxArray.Pop(): TBox;
var
  h: Integer;
begin
  h := High(Self);
  if h >= 0 then
  begin
    Result := Self[h];
    SetLength(Self, h);
  end else
    RaiseException(erOutOfRange, 'Array is empty');
end;

procedure TBoxArray.Extend(Arr:TBoxArray);
var L:Int32;
begin
  if Length(arr) > 0 then
  begin
    L := Length(Self);
    SetLength(Self, Length(Arr) + L);
    MemMove(Arr[0],Self[L],Length(Arr)*SizeOf(TBox));
  end;
end; 

function TBoxArray.Find(const Value: TBox): Integer;
begin
  for Result := 0 to High(Self) do
    if (Self[Result].X1 = Value.X1) and (Self[Result].Y1 = Value.Y1) and
       (Self[Result].X2 = Value.X2) and (Self[Result].Y2 = Value.Y2) then
         Exit;

  Result := -1;
end;

function TBoxArray.FindAll(const Value: TBox): TIntegerArray;
var
  i,top: UInt32;
begin
  for i:=0 to High(Self) do
    if (Self[i].X1 = Value.X1) and (Self[i].Y1 = Value.Y1) and
       (Self[i].X2 = Value.X2) and (Self[i].Y2 = Value.Y2) then
    begin
      SetLength(Result, top+1);
      Result[Inc(top)-1] := i;
    end;
end

function TBoxArray.Reversed(): TBoxArray;
var
  lo:PtrUInt;
  p,r:^TBox;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure TBoxArray.Reverse();
var
  tmp:TBox;
  lo,hi:^TBox;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function TBoxArray.Combine(other: TBoxArray): TBoxArray;
begin
  SetLength(Result, Length(Self) + Length(other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(other) > 0 then
    MemMove(other[0], result[Length(Self)], Length(other)*SizeOf(other[0]));
end;

procedure TBoxArray.Sort(weights: TIntegerArray; iLo, iHi: Int32; SortUp: Boolean);
var
  lo, hi, mid: Int32;
begin
  if (Length(weights) <> Length(self)) then Exit;
  lo := iLo;
  hi := iHi;
  Mid := weights[(lo + hi) shr 1];
  repeat
    if SortUp then
    begin
      while (weights[lo] < mid) do Inc(lo);
      while (weights[hi] > mid) do Dec(hi);
    end else
    begin
      while (weights[Lo] > mid) do Inc(Lo);
      while (weights[Hi] < mid) do Dec(Hi);
    end;
    if (lo <= hi) then
    begin
      Swap(weights[lo], weights[hi]);
      Swap(self[lo], self[hi]);
      Inc(lo);
      Dec(hi);
    end;
  until Lo > Hi;
  if (hi > iLo) then self.Sort(weights, iLo, hi, SortUp);
  if (lo < iHi) then self.Sort(weights, lo, iHi, SortUp);
end;

procedure TBoxArray.SortFromMidPoint(From: TPoint);
var
  I, L: Integer;
  Mid: TPoint;
  weights: TIntegerArray;
begin
  L := High(Self);
  if (L <= 0) then
    Exit;

  SetLength(weights, L + 1);
  for i := 0 To L do
  begin
    Mid := MiddleBox(Self[i]);
    weights[i] := Round(Sqr(From.X - Mid.X) + Sqr(From.Y - Mid.Y));
  end;

  Self.Sort(weights, 0, L, True);
end;

procedure TBoxArray.ModifySide(side:String='x1'; change:Int32=1);
var i:Int32;
begin
  side := LowerCase(side);
  if Length(side) < 2 then Exit();
  SetLength(side, 2);
  for i:=0 to High(self) do
    case Side of
      'x1': self[i].x1 += change;
      'y1': self[i].y1 += change;
      'x2': self[i].x2 += change;
      'y2': self[i].y2 += change;
    end;
end;

procedure TBoxArray.Offset(pt:TPoint);
var i:Int32;
begin
  for i:=0 to High(self) do
  begin
    self[i].x1 += pt.x;
    self[i].y1 += pt.y;
    self[i].x2 += pt.x;
    self[i].y2 += pt.y;
  end;
end;
