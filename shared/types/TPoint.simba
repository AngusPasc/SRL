function TPoint.Random(Min, Max: Integer; Gauss: Boolean = False): TPoint;
begin
  if (Gauss) then
  begin
    Result.X := Self.X + srl.GaussRangeInt(Min, Max);
    Result.Y := Self.Y + srl.GaussRangeInt(Min, Max);
  end else 
  begin
    Result.X := Self.X + System.Random(Min, Max);
    Result.Y := Self.Y + System.Random(Min, Max);
  end;
end;

function TPoint.Random(XMin, XMax: Integer; YMin, YMax: Integer; Gauss: Boolean = False): TPoint; overload;
begin
  if (Gauss) then
  begin
    Result.X := Self.X + srl.GaussRangeInt(XMin, XMax);
    Result.Y := Self.Y + srl.GaussRangeInt(YMin, YMax);
  end else 
  begin
    Result.X := Self.X + System.Random(XMin, XMax);
    Result.Y := Self.Y + System.Random(YMin, YMax);
  end;
end;

procedure TPoint.Offset(p: TPoint);
begin
  Self.X := Self.X + p.X;
  Self.Y := Self.Y + p.Y;
end;

function TPoint.InBox(Box: TBox): Boolean;
begin
  Result := PointInBox(Self, Box);
end;

function TPoint.InCircle(Mid: TPoint; Radius: UInt32): Boolean;
begin
  Result := Distance(Self.x, Self.y, Mid.x, Mid.y) <= Radius;
end;

function TPoint.DistanceTo(P:TPoint): Extended;
begin
  Result := Distance(Self.x, Self.y, P.x, P.y);
end;

function TPoint.Rotate(Angle: Extended; Mid: TPoint): TPoint;
begin
  Result := RotatePoint(Self, Angle, Mid.X, Mid.Y);
end;

function TPoint.Magnitude(): Extended;
begin
  Result := Sqrt(Sqr(Self.x) + Sqr(Self.y));
end;

function TPoint.Equals(Other: TPoint): Boolean;
begin
  Result := (Self.X = Other.X) and (Self.Y = Other.Y);
end;

function TPoint.AngleTo(pt2: TPoint): Extended;
begin
  Result := ((ArcTan2((pt2.Y - self.Y), (pt2.X - self.X)) * (180.0 / Pi)) + 90.0);
  if (Result < 0.0) then
    Result := (Result + 360.0);
end;


