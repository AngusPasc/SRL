type
  TTimeFormat = (Time_Formal, Time_Short, Time_Abbrev, Time_Bare, Time_FStop, Time_Formal_Long);

function TSRL.MsToTime(const MS: UInt64; const Format: TTimeFormat): String;
var
  STA: array [0..5] of TVariantArray;
  Time: TIntegerArray;
  i, t, tl: Integer;
begin
  Result := '';

  if (Format = TIME_FORMAL_LONG) then
  begin
    tl := 7;
    t := 6;
    SetLength(Time, tl);
    ConvertTime64(MS, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5], Time[6]);
  end else begin
    tl := 3;
    t := 2;
    SetLength(Time, tl);
    ConvertTime(MS, Time[0], Time[1], Time[2]);
  end;

  STA[Ord(Time_Formal)] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Ord(Time_Short)] := ['h ', 'm ', 's', False, 2];
  STA[Ord(Time_Abbrev)] := [' hr ', ' min ', ' sec', False, 0];
  STA[Ord(Time_Bare)] := [':', ':', '', True, 2];
  STA[Ord(Time_FStop)]  := ['.', '.', '', True, 2];
  STA[Ord(Time_Formal_Long)] := [' Years, ', ' Months, ', ' Weeks, ', ' Days, ', ' Hours, ', ' Minutes and ', ' Seconds', False, 0];

  for i := 0 to t do
    if (Time[i] > 0) or (STA[Ord(Format)][tl]) or (i = t) then
      Result += PadZ(IntToStr(Time[i]), STA[Ord(Format)][tl+1]) + STA[Ord(Format)][i];
end;

function TSRL.TimeRunning(TheType: TTimeFormat = Time_Formal_Long): String;
begin
  Result := MsToTime(GetTimeRunning(), TheType);
end;

function TSRL.WaitFunc(Func: function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  t: UInt64;
begin
  Result := False;
  t := GetTickCount64() + MaxTime;

  while (GetTickCount64() < t) do
  begin
    if (Func()) then
      Exit(True);
    Wait(WaitPerLoop);
  end;
end;

function TSRL.WaitTypeFunc(Func: function: Boolean of object; WaitPerLoop, MaxTime: Integer): Boolean;
var
  t: UInt64;
begin
  Result := False;
  t := GetTickCount64() + MaxTime;

  while (GetTickCount64() < t) do
  begin
    if (Func()) then
      Exit(True);
    Wait(WaitPerLoop);
  end;
end;

(*
TTimeMarker
~~~~~~~~~~~

.. code-block:: pascal

    type TTimeMarker = record
        time, startTime: LongWord;
        paused: Boolean;
    end;

Timer type which is usefull for loops, timing and writing progress reports.

.. note::

    - by Bart de Boer
*)
type
  TTimeMarker = record
    name: string;
    time, startTime, __prevMark: UInt64;
    paused: Boolean;
  end;

(*
TTimeMarker.start
~~~~~~~~~~~~~~~~~

.. code-block pascal

    procedure TTimeMarker.start();

Starts the timer. Can also be used when paused to continue where it left.

.. note::

    - by Bart de Boer

Example:

.. code-block:: pascal

    MyScriptTimer.start();
*)
procedure TTimeMarker.start();
begin
  if (Self.startTime = 0) then
    Self.__prevMark := getTickCount64(); // used for adding time after a pause

  if (not Self.paused) and (Self.startTime = 0) then
  begin
    Self.startTime := getTickCount64();
    Self.time := 0;
  end;

  Self.paused := False;
end;

(*
TTimeMarker.reset
~~~~~~~~~~~~~~~~~

.. code-block pascal

    procedure TTimeMarker.reset();

Stops the timer and resets it to zero.

.. note::

    - by Bart de Boer

Example:

.. code-block:: pascal

    MyScriptTimer.reset();
*)
procedure TTimeMarker.reset();
begin
  Self.paused := False;
  Self.time := 0;
  Self.startTime := 0;
  Self.__prevMark := 0;
end;

(*
TTimeMarker.pause
~~~~~~~~~~~~~~~~~

.. code-block pascal

    procedure TTimeMarker.pause();

Pauses the timer. It can be continued with start().

.. note::

    - by Bart de Boer

Example:

.. code-block:: pascal

    MyScriptTimer.pause();
    TakeABreak(90000);
    MyScriptTimer.start();
*)
procedure TTimeMarker.pause();
begin
  Self.time := Self.time + (getTickCount64() - Self.__prevMark);
  Self.paused := True;
end;

(*
TTimeMarker.getTime
~~~~~~~~~~~~~~~~~~~

.. code-block pascal

    function TTimeMarker.getTime(): LongWord;

Gets the time from the timer. Returns zero if the timer was not set.

.. note::

    - by Bart de Boer

Example:

.. code-block:: pascal

    MyScriptTimer.start();
    repeat
        DoStuff;
    until(MyScriptTimer.getTime() > 60000);

*)
function TTimeMarker.getTime(): UInt64;
begin
  if not Self.paused then
    Result := Self.time + (getTickCount64() - Self.__prevMark)
  else
    Result := Self.time;
end;

(*
TTimeMarker.getTotalTime
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block pascal

    function TTimeMarker.getTotalTime(): LongWord;

Gets the time from the timer including the time it was paused. Returns zero if
the timer was not set.

.. note::

    - by Bart de Boer

Example:

.. code-block:: pascal

    BreakTime := MyTimer.getTotalTime() - MyTimer.getTime();

*)
function TTimeMarker.getTotalTime(): UInt64;
begin
  if (Self.startTime > 0) then
    Result := getTickCount64() - Self.startTime;
end;

