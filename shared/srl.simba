type
  ESRLOption = (srlDebug, srlDebugTimeStamp);
  ESRLOptions = set of ESRLOption;
  EDebugType = (dtHeader, dtFooter, dtFatal, dtNone);

type
  TSRL = record
    _DebugLevel: Integer;

    StartTime: UInt64;
    DefaultClientBounds: TBox;

    Debugging: Boolean;
    DebugTimeStamp: Boolean;

    OnLoginPlayer: procedure();
    OnLoginResponse: function(Response: String): Boolean;
 end;

var
  srl: TSRL;

procedure TSRL.Writeln(Str: String; const debugType: EDebugType);

  function TimeRunning(ms: UInt64): String;
  var
    _, Hour, Min, Sec: Integer;
    Hours, Mins, Seconds: String;
  begin
    ConvertTime64(ms, _, _, _, _, Hour, Min, Sec);
    Hours := IntToStr(Hour); Mins := IntToStr(Min); Seconds := IntToStr(Sec);
    if (Length(Hours) = 1) then
      Hours := '0' + Hours;
    if (Length(Mins) = 1) then
      Mins := '0' + Mins;
    if (Length(Seconds) = 1) then
      Seconds := '0' + Seconds;
    Result := '['+Hours+':'+Mins+':'+Seconds+']';
  end;

var s, Typ: String;
begin
  if (not Debugging) then
    Exit;

  if (Length(Str) > 0) then
  begin
    if (DebugTimeStamp) then
      s := TimeRunning(Self.StartTime);

    if (debugType = dtFatal) then
      Typ := ' [FATAL]:';

    if (debugType = dtFooter) and (_DebugLevel > 0) then
      Dec(_DebugLevel);

    s += StringOfChar('-', _DebugLevel * 2) + Typ + ' ';

    if (debugType = dtHeader) then
      Inc(_DebugLevel);

    _Write(s + Str);
  end;

  _Writeln();

  if (debugType = dtFatal) then
    TerminateScript;
end;

procedure TSRL.Writeln(Str: String); overload;
begin
  Self.Writeln(Str, dtNone);
end;

function TSRL.Writeln(Str: String; AResult: Variant; Footer: String = ''): Variant; overload;
begin
  Result := AResult;
  Self.Writeln(Str);
  if (Footer <> '') then
    Self.Writeln(Footer, dtFooter);
end;

procedure TSRL.WriteFmt(Str: String; Args: TVariantArray; debugType: EDebugType = dtNone);
begin
  Self.Writeln(Format(Str, Args), debugType);
end;

procedure TSRL.Setup(Options: ESRLOptions = [srlDebug]);
begin
  _DebugLevel := 1;
  DebugTimeStamp := False;
  Debugging := False;

  StartTime := GetTickCount64;

  if (srlDebugTimeStamp in Options) then
    DebugTimeStamp := True;
  if (srlDebug in Options) then
    Debugging := True;
end;



