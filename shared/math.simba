(*
Modulo
~~~~~~

.. code-block:: pascal

    function Modulo(X, Y: Double): Double;

This function returns the remainder from the division of the first argument by the second.
Though it always returns a result with the same sign as its second operand (or zero).

Example:

.. code-block:: pascal

    Writeln(Modulo(a, b));
*)
function Modulo(X, Y: Double): Double;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
Modulo; overload
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function Modulo(X, Y: Integer): Integer; overload;

Integer overload for Modulo.

Example:

.. code-block:: pascal

    Writeln(Modulo(a, b));
*)
function Modulo(X, Y: Integer): Integer; overload;
begin
  Result := X - Floor(X / Y) * Y;
end;

(*
DeltaAngle
~~~~~~~~~~

.. code-block:: pascal

    function DeltaAngle(DegA, DegB: Double; R: Double = 360): Double;

Calculates the shortest difference between two given angles.

Example:

.. code-block:: pascal

    Writeln(DeltaAngle(350.0, 10.0));
*)
function DeltaAngle(DegA, DegB: Double; R: Double = 360): Double;
begin
  Result := Modulo((DegA - DegB + R/2), R) - R/2;
end;

(*
PointInRect
~~~~~~~~~~~

.. code-block:: pascal

    function PointInRect(const Pt: TPoint; const A, B, C, D: TPoint): Boolean;

Returns true if the TPoint 'Pt' is in a rect (defined by four points).

.. note:: by slacky

Example:

.. code-block:: pascal

    Writeln(PointInRect(Point(100, 100), Point(0, 0), Point(200, 1), Point(201, 201), Point(0, 225)));
*)
function PointInRect(const Pt: TPoint; const A, B, C, D: TPoint): Boolean;
var
  Vec:TPoint;
  Dot:Extended;
begin
  Vec := Point(A.x-B.x, A.y-B.y);
  Dot := ((A.x-Pt.x) * Vec.x) + ((A.y-Pt.y) * Vec.y);
  if not((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
    Exit(False);
  Vec := Point(A.x-D.x, A.y-D.y);
  Dot := ((A.x-Pt.x) * Vec.x) + ((A.y-Pt.y) * Vec.y);
  if not((0 <= Dot) and (Dot <= (Sqr(Vec.x) + Sqr(Vec.y)))) then
    Exit(False);
  Result := True;
end;


